<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>在线增加 MariaDB 主从</title>
    <url>/posts/add-mysql-master-slave.html</url>
    <content><![CDATA[<p>昨天晚上 <code>MySQL</code> 机器的 <code>CPU</code> 有点高, 感觉有点扛不住了. 新项目只是一个尝试性的项目, 不确定是否有市场, 所有并没有搭建主从</p>
<span id="more"></span>

<p>启用主库 <code>binlog</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">bind-address=0.0.0.0</span><br><span class="line">server-id=1</span><br><span class="line">skip-networking=0</span><br><span class="line">skip-name-resolve=1</span><br><span class="line">symbolic-links=0</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">relay-log=mysql-relay-bin</span><br><span class="line">replicate-wild-do-table=mysql.%</span><br><span class="line">expire_logs_days=3</span><br></pre></td></tr></table></figure>

<p><strong>重启主库服务</strong> 后查看 <code>binlog</code> 位置 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">show</span> master status\G;</span><br><span class="line"><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span> <span class="number">1.</span> <span class="type">row</span> <span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span><span class="operator">*</span></span><br><span class="line">            File: mysql<span class="operator">-</span>bin<span class="number">.000033</span> #当前记录的日志</span><br><span class="line">        Position: <span class="number">328</span> #日志中记录的位置  </span><br><span class="line">    Binlog_Do_DB: </span><br><span class="line">Binlog_Ignore_DB: </span><br></pre></td></tr></table></figure>

<p>添加主从复制的用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">grant</span> replication slave <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;account&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> flush privileges;</span><br></pre></td></tr></table></figure>

<p>启用从库同步</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server-id=2</span><br><span class="line">log-bin=mysql-bin</span><br><span class="line">log-slave-updates</span><br><span class="line">sync_binlog=0</span><br><span class="line">innodb_flush_log_at_trx_commit=0        </span><br><span class="line">slave-net-timeout=60                    </span><br><span class="line">log_bin_trust_function_creators=1</span><br></pre></td></tr></table></figure>

<p>安装 <code>xtrabackup</code> 工具导出数据库数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://www.percona.com/redir/downloads/percona-release/ubuntu/latest/percona-release_0.1-4.xenial_all.deb</span><br><span class="line">$ sudo dpkg -i percona-release_0.1-4.xenial_all.deb</span><br><span class="line">$ sudo apt update &amp;&amp; sudo apt-get install percona-xtrabackup-24 -y</span><br></pre></td></tr></table></figure>

<p>创建备份和导出数据库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ innobackupex --defaults-file=/data/meiyuan/mysql/my.cnf --host=127.0.0.1 --port=3306 --databases=<span class="string">&quot;meiyuan&quot;</span> --user=root --password=123456 /data/meiyuan/mysql/backup_full</span><br><span class="line">$ mysqldump -h127.0.0.1 -uroot -P123456 -B -R --single-transaction --master-data=2&gt; dump.sql</span><br></pre></td></tr></table></figure>

<p>建立主从并查看状态 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> change master <span class="keyword">to</span> master_host<span class="operator">=</span><span class="string">&#x27;192.168.56.107&#x27;</span>,master_user<span class="operator">=</span><span class="string">&#x27;account&#x27;</span>,master_password<span class="operator">=</span><span class="string">&#x27;123456&#x27;</span>,master_log_file<span class="operator">=</span><span class="string">&#x27;mysql-bin.000033&#x27;</span>,master_log_pos<span class="operator">=</span><span class="number">328</span>;</span><br><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">start</span> slave;</span><br><span class="line">MariaDB [(<span class="keyword">none</span>)]<span class="operator">&gt;</span> <span class="keyword">show</span> master status;</span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------+--------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> File             <span class="operator">|</span> Position <span class="operator">|</span> Binlog_Do_DB <span class="operator">|</span> Binlog_Ignore_DB <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------+--------------+------------------+</span></span><br><span class="line"><span class="operator">|</span> mysql<span class="operator">-</span>bin<span class="number">.000001</span> <span class="operator">|</span>      <span class="number">328</span> <span class="operator">|</span>              <span class="operator">|</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------------+----------+--------------+------------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.002</span> sec)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>MariaDB</tag>
      </tags>
  </entry>
  <entry>
    <title>API 设计小谈</title>
    <url>/posts/api-design.html</url>
    <content><![CDATA[<p>When you encounter a problem, you need to solve the problem, not to escape, and there is no way to escape, you still have to solve it in the end</p>
<p>关于 <code>API</code> 的设计, 一直都是一个比较难搞的问题, 大家对标准也有不同的理解. 这几年里我也接触了好几个项目, 有自己独立设计的, 也有辅助同事设计的. 虽然都是一些中小型的项目 (最大的一个 <code>QPS</code> 1400), 但是开发的过程中也学到了很多东西</p>
<p>有一点我认为尤其的重要, 在多人开发中, 如果大家拟定了一个规范, 不管这个规范是好或者是坏 (前提是: 这个方案是经过讨论经过 <strong>大多数人同意</strong> 的), <strong>请一定要准守</strong>. 这样会让其他开发人员在理解你的代码逻辑的时候, 能更容易看懂; 一旦有人开始不准守规范的时候, 那么项目维护和开发会非常的蛋疼</p>
<span id="more"></span>

<h4 id="RESTful-风格的-API"><a href="#RESTful-风格的-API" class="headerlink" title="RESTful 风格的 API"></a><code>RESTful</code> 风格的 <code>API</code></h4><p>用还是不用 <code>RESTful</code> , 在我们的团队里经过了很多次很多次的讨论, 我们的第一个项目所有的请求都使用 <code>POST</code> 的方式提交, 返回的状态码也都一致 (成功就是: 200, 失败就是: 500); 这种方式存在很大的问题, 例如: 在排查请求日志时, 只能通过 <code>URL</code> 去筛选, 一旦想知道用户执行了多少更新操作, 多少删除操作就会很麻烦. 当然还有很多问题, 使用过的朋友应该都知道</p>
<p>当我们接触到 <code>RESTful</code> 这个概念时, 当时的想法是: 哇喔~, 这是个啥, 这个好牛逼!!. 之后的几个项目, 都把 <code>API</code> 的风格都切换到了 <code>RESTful</code>, 当然这个过程并不是那么的友好, 一个新概念的使用, 中间的试错成本还是挺大的</p>
<blockquote>
<p>当然 <code>RESTful</code> 也有它自己的缺点, 这里我就不列举了</p>
</blockquote>
<p>为什么在上面说, 在开发过程中一定要准守团队的规范</p>
<p>最近一段时间公司发展比较迅速, 人员流动也比较大, 开发任务又急, 很多新的同事来不及对项目有一定了解, 就要开始开发任务. 所以出现了很多 <strong>个人风格</strong> 的代码, 也出现了很多违背规范的代码, 导致整个项目看起来很乱, 需要花费大量的时间, 去梳理和重构. 在梳理和重构的过程中, 就对是否需要继续使用 <code>RESTful</code> 发起了争论</p>
<p>其中争论最大的一点, 就是项目中引入了 <strong>请求和响应加密</strong> 的需求, 在 <code>RESTful</code> 中资源的唯一标识 (例如: <code>/users/1</code>) 都是放在 <code>URL</code> 上的, 但是需求并不想向外部暴露任何信息</p>
<h4 id="项目中-API-设计的一些实践"><a href="#项目中-API-设计的一些实践" class="headerlink" title="项目中 API 设计的一些实践"></a>项目中 <code>API</code> 设计的一些实践</h4><h5 id="客户端环境数据和一些参数的收集"><a href="#客户端环境数据和一些参数的收集" class="headerlink" title="客户端环境数据和一些参数的收集"></a>客户端环境数据和一些参数的收集</h5><p>一般的项目里, 对客户端的环境, 多多少少会有一些依赖, 例如: 系统、包名等; 客户端的原生请求头 <code>User-Agent</code> 会带上一些数据, 有些是我们需要的, 有些是我们不需要的, 不够简洁明了, 最终我们对 <code>User-Agent</code> 做了一定的修改, 最终的格式如下: </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package/1.0.0 iOS/11.2.6(iphone x)</span><br></pre></td></tr></table></figure>

<ul>
<li><code>package</code> <code>App</code> 的包名, 很多软件都会有 <strong>马甲包</strong>,  <code>package</code> 就是用于区分 <strong>马甲包</strong></li>
<li><code>1.0.0</code> 软件版本</li>
<li><code>iOS</code> 客户端操作系统, 一般就是 <code>iOS/Android</code></li>
<li><code>11.2.6</code> 客户端操作系统版本</li>
<li><code>iphone x</code> 客户端设备型号</li>
</ul>
<h5 id="敏感数据不要使用-id-作为唯一标识符"><a href="#敏感数据不要使用-id-作为唯一标识符" class="headerlink" title="敏感数据不要使用 id 作为唯一标识符"></a>敏感数据不要使用 <code>id</code> 作为唯一标识符</h5><p>在最初的几个项目中, 我们对安全这一块都没有太多的关注, 其实, 在 <code>web</code> 开发来说 <strong>安全</strong> 是一个尤为重要的问题.</p>
<p>因为对安全没有太多的关注, 所以在安全上也吃了几个不小的亏, 例如: 被人 <code>DDOS</code>, 被人刷数据等等.</p>
<p>不使用 <code>id</code> 作为敏感数据的唯一标识, 是因为, <code>id</code> 在数据库中一般都是一个 <strong>自增且连续</strong> 的数字, 当被恶意用户发现这个规律时 (这个规律太容易发现了), 可能会通过轮询恶意获取到这部分数据, 所以敏感数据的唯一标识, <strong>一定要是无序的</strong></p>
<blockquote>
<p>对于数据, 没有敏感不敏感, 任何一部分数据对于公司来说都是有价值的</p>
</blockquote>
<h5 id="对-JWT-的一些实践"><a href="#对-JWT-的一些实践" class="headerlink" title="对 JWT 的一些实践"></a>对 <code>JWT</code> 的一些实践</h5><p>一般的 <code>JWT</code> 分为三个部分: <code>Header</code>、<code>Payload</code>、<code>Signature</code>, 我们使用的是魔改之后的 <code>JWT</code>, 一共只有两个部分: <code>UUID</code> 和 <code>Payload</code>, 其中 <code>UUID</code> 是用户的唯一标识, <code>Payload</code> 是经过加密的用户数据</p>
<p>为什么要使用 <code>UUID</code> 代替 <code>Header</code>? </p>
<p>传统的 <code>JWT</code> 中 <code>Header</code> 是一个元数据的 <code>json</code> 对象, 然后通过 <code>Base64URL</code> 算法转成的字符串. 之所以要使用 <code>UUID</code> 代替它, 最主要 的是因为需要通过用户的唯一标识, 定位到用户的所有请求日志, 原生的 <code>JWT</code> 是没有办法通过用户部分信息定位到日志的</p>
<p>而 <code>Paylaod</code> 中包含的就是: </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">	<span class="attr">&quot;uuid&quot;</span>: <span class="number">10020203</span>,</span><br><span class="line">	<span class="attr">&quot;expired_at&quot;</span>: <span class="number">1631091571</span>,</span><br><span class="line">	<span class="attr">&quot;updated_at&quot;</span>: <span class="number">1631091571</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>exppired_at</code>: <code>token</code> 过期时间</li>
<li><code>updated_at</code>: <code>token</code> 刷新过期时间, 一般是 <code>exppired_at</code> + 一周</li>
</ul>
<h5 id="请求和响应的加解密"><a href="#请求和响应的加解密" class="headerlink" title="请求和响应的加解密"></a>请求和响应的加解密</h5><p>上面有说过, 在我们是否需要继续使用 <code>RESTful</code> 扽讨论中, 争论最大的一点, 就是关于 <code>URL</code> 参数的问题上. 最后的讨论的结果, 是继续使用 <code>RESTful</code>, 但是客户端的请求全部都是 <code>POST</code> 发送, 在服务端的业务代码之前, 起一个 <code>openresty</code> 服务, 用 <code>lua</code> 写一个脚本, 去 <strong>拆解和转发</strong> 客户端的请求, 并对请求和响应加解密</p>
<p>例如客户端修改用户信息接口 <code>PUT /users/1</code> 就变成了: </p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;path&quot;</span>:    <span class="string">&quot;/users/1&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;method&quot;</span>:  <span class="string">&quot;PUT&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;query&quot;</span>:   <span class="string">&quot;name=a&amp;age=2&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;payload&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;nickname&quot;</span>: <span class="string">&quot;new nickname&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;age&quot;</span>: <span class="number">18</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端所有的请求都通过一个统一的 <code>URL</code>, 例如: <code>POST /api</code>, <code>openresty</code> 收到请求之后, 会根据请求的 <code>payload</code> 拆解成一个标准的 <code>RESTful</code> 风格的格式并转发到业务机器上</p>
<h5 id="版本化"><a href="#版本化" class="headerlink" title="版本化"></a>版本化</h5><p>一个项目, 经常会发生变化。业务变化可能修改 <code>API</code> 参数或响应数据结构, 以及资源之间的关系. 一般来说, 字段的增加不会影响旧的客户端运行. 但是当存在一些破坏性修改时, 就需要使用新的版本将数据导向到新的资源地址.</p>
<blockquote>
<p>注意: 这里说的版本化是服务端接口版本化, 和客户端的软件版本没有关系</p>
</blockquote>
<p>比较推荐的做法是使用 <code>URL</code> 前缀，例如 <code>/v1/users/</code> 表达获取 <code>v1</code> 版本下的用户列表</p>
]]></content>
  </entry>
  <entry>
    <title>Composer 使用记录</title>
    <url>/posts/composer-usage-record.html</url>
    <content><![CDATA[<p><code>Composer</code> 是 <code>Composer</code> 用来管理依赖（<code>dependency</code>）关系的工具. <code>Composer</code> 通常情况下通过 <code>composer.json</code> 文件来配置和管理依赖的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mac 安装</span></span><br><span class="line">$ sudo curl -s https://getcomposer.org/installer | sudo php</span><br><span class="line">$ sudo chmod a+x composer.phar</span><br><span class="line">$ sudo mv composer.phar /usr/<span class="built_in">local</span>/bin/composer  &amp;&amp; composer --version</span><br><span class="line"><span class="comment"># 切换 composer 国内镜像</span></span><br><span class="line">$ composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ubuntu 安装</span></span><br><span class="line">$ sudo apt-get install composer -y</span><br><span class="line"><span class="comment"># 切换 composer 国内镜像</span></span><br><span class="line">$ composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure>

<h4 id="常用命令收集"><a href="#常用命令收集" class="headerlink" title="常用命令收集"></a>常用命令收集</h4><p><code>Composer</code> 安装指定版本的依赖, 版本符号说明:</p>
<ul>
<li><code>*</code>: 最新版</li>
<li><code>&gt;=1.0</code>: 大于等于 1.0 的最高版本 </li>
<li><code>&gt;=1.0 &lt;2.0</code>: 大于等于 1.0 且小于 2.0 的最高版本 </li>
<li><code>1.0 - 2.0</code>: 1.0 至2.0 之间的最高版本</li>
<li><code>1.0.*</code>: <code>&gt;= 1.0 &amp;&amp; &lt;1.1</code> 的最高版本 </li>
<li><code>~1.2</code>: <code>&gt;=1.2 &amp;&amp; &lt;2.0</code> 的最高版本</li>
<li><code>~1.2.3</code>: <code>&gt;=1.2.3 &amp;&amp; &lt;1.3.0</code> 最高版本</li>
<li><code>^1.2.3</code>: <code>&gt;=1.2.3 &amp;&amp; &lt;2.0.0</code> 的最高版本</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer require illuminate/redis:5.5.*</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>composer require</code> 常用参数还有: <code>--dev</code> 表示安装到 <code>require-dev</code> 列中</p>
</blockquote>
<p>忽略版本限制, <code>Composer</code> 在安装扩展包时, 会检查本地 <code>PHP</code> 或者 <code>PHP</code> 扩展版本, 但是有的时候我们不需要这个检查, 例如我们的本地开发环境 (我们的调试环境是由一台服务器提供的). </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ composer install --ignore-platform-reqs</span><br></pre></td></tr></table></figure>

<blockquote>
<p>生产环境运行 <code>composer install</code> 建议加上 <code>-no-dev</code>, 跳过 <code>require-dev</code> 字段中列出的包</p>
</blockquote>
]]></content>
      <tags>
        <tag>Composer</tag>
      </tags>
  </entry>
  <entry>
    <title>使用阿里云 API 申请 Let’s Encrypt 泛域名免费 SSL 证书</title>
    <url>/posts/configure-nginx-https-certificate.html</url>
    <content><![CDATA[<p>The Internet has made the world today, and today’s world has made the Internet</p>
<p>最近帮朋友写了个小程序, 写完啦, 要测试啦. 没有 <code>https</code> 证书!! 我个人比较喜欢把测试代码放到自己的服务器上, 这样方便我自己修改 (PS: 自己的服务器嘛, 想怎么来怎么来). 所以得想办法整个 <code>https</code> 证书. 本来想看看网上有没有免费的, 一个不小心就 <code>Google</code> 到阿里云就有免费的证书. 刚好服务器是阿里的, 域名也是阿里的. 所以决定整一个用用</p>
<h4 id="网站部署-HTTPS-的重要性"><a href="#网站部署-HTTPS-的重要性" class="headerlink" title="网站部署 HTTPS 的重要性"></a>网站部署 <code>HTTPS</code> 的重要性</h4><p>互联网造就了很多产业, 也造就了很多黑产业. 让我们想象一下: 当我们访问淘宝、京东的时候. 右下角漂浮着 “大家好我是渣渣辉, 是兄滴就来啃我”. 这种感觉肯定特别的酸爽 (PS: 哈哈哈哈哈, 要真是这样张家辉肯定还会火点). 或者我们再来想象一下: 当我们输入银行的网址后打算转账的时候, 卡号输了、密码输了、钱没到账不说, 银行卡里一分不剩, 这是不是就很悲哀了呢</p>
<p>上举的两个例子其实是真实存在的. 在输入网址访问网页, 到网页返回数据给我们的过程中, 其实是分很多步骤的比如最基础的 <code>DNS</code> 解析 (PS: 不做详解). 如果在 <code>DNS</code> 解析的过程中被人劫持并注入一些东西, 就可能会出现上述的两种情况</p>
<span id="more"></span>

<h4 id="HTTP-和-HTTPS-的区别"><a href="#HTTP-和-HTTPS-的区别" class="headerlink" title="HTTP 和 HTTPS 的区别"></a><code>HTTP</code> 和 <code>HTTPS</code> 的区别</h4><p><code>HTTP</code> 协议或者说 <strong>超文本传输协议</strong> 是通过明文的方式发送内容的, 不提供任何方式的数据加密, 如果有攻击者截取到了浏览器和服务器之间的传输报文, 就可以直接读懂其中的信息, 这对我们一些如: 住址、卡号、密码等敏感数据来说是非常不安全的. 为了解决这一个缺陷, 就需要使用另一种协议 <code>HTTPS</code> <strong>安全套接字层超文本传输协议</strong>, 为了数据传输安全, <code>HTTPS</code> 在 <code>HTTP</code> 的基础上加入了 <code>SSL</code> 协议, <code>SSL</code> 依靠证书来验证服务器身份, 并为浏览器和服务器之间传递的数据加密</p>
<p>相对于 <code>HTTP</code> 来说, <code>HTTPS</code> 更加安全、更加可靠, <strong>谷歌</strong> 曾明确表示: “希望所有站长都是使用 <code>HTTPS</code>, 而非 <code>HTTP</code>“; 其搜索引擎在算法更新中也表示: “同等条件下，使用HTTPS加密技术的站点在搜索排名上更具优势”. 这两点可以看出其对 <code>HTTPS everywhere</code> 这一目标的决心</p>
<h5 id="使用阿里云-API-申请-Let’s-Encrypt-泛域名免费-SSL-证书"><a href="#使用阿里云-API-申请-Let’s-Encrypt-泛域名免费-SSL-证书" class="headerlink" title="使用阿里云 API 申请 Let’s Encrypt 泛域名免费 SSL 证书"></a>使用阿里云 API 申请 Let’s Encrypt 泛域名免费 SSL 证书</h5><p><code>SSL</code> 证书是部署 <code>HTTPS</code> 的必要条件, 由受信任的数字证书颁发机构 <code>CA</code>，在验证服务器身份后颁发. <code>Let&#39;s Encrypt</code> 是一个个免费、自动化、开放的证书签发服务。它由 <code>ISRG</code>（<code>Internet Security Research Group</code>，互联网安全研究小组）提供服务，而 <code>ISRG</code> 是来自于美国加利福尼亚州的一个公益组织。<code>Let&#39;s Encrypt</code> 得到了 <code>Mozilla、Cisco、Akamai、Electronic Frontier Foundation</code> 和 <code>Chrome</code> 等众多公司和机构的支持.</p>
<h5 id="安装依赖和申请工具"><a href="#安装依赖和申请工具" class="headerlink" title="安装依赖和申请工具"></a>安装依赖和申请工具</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install curl cron socat -y</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl https://get.acme.sh | sh</span><br></pre></td></tr></table></figure>

<h5 id="导入阿里的-Key-和-Secret"><a href="#导入阿里的-Key-和-Secret" class="headerlink" title="导入阿里的 Key 和 Secret"></a>导入阿里的 Key 和 Secret</h5><p>使用 <strong>阿里云</strong> 的 <code>API</code> 申请 <code>Let&#39;s Encrypt</code> 需要提供阿里云的 <code>Key</code> 和 <code>Secret</code> [传送门])(<a href="https://usercenter.console.aliyun.com/#/manage/ak">https://usercenter.console.aliyun.com/#/manage/ak</a>) 直接登录就可以申请, 获取到 <code>Key</code> 和 <code>Secret</code> 后导入到环境变量中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export Ali_Key=&quot;xxxxx&quot;</span><br><span class="line">export Ali_Secret=&quot;xxxxx&quot;</span><br></pre></td></tr></table></figure>

<h5 id="申请证书和设置定时重新申请"><a href="#申请证书和设置定时重新申请" class="headerlink" title="申请证书和设置定时重新申请"></a>申请证书和设置定时重新申请</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">~/.acme.sh/acme.sh --issue --dns dns_ali -d domain.com -d &#x27;*.domain.com&#x27;</span><br></pre></td></tr></table></figure>

<p>出现以下图片内容就表示成功了</p>
<p><img src="/images/configure_nginx_https_certificate_ssl_success.png" alt="images"></p>
<p>通过 <code>Let&#39;s Encrypt</code> 申请的 <code>SSL</code> 证书有效时间只有 90 天, 所以到时间后需要重新申请一次, 但是这样太麻烦了. 不过 <code>acme.sh</code> 脚本已经帮我们做好了这一步, 只需要执行一个命令就可以了:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/home/ubuntu/.acme.sh/acme.sh  --install-cert  -d domain.com --key-file   /home/ubuntu/ssl/domain.com/domain.com.key --fullchain-file /home/ubuntu/ssl/domain.com/domain.com.cer --reloadcmd  &quot;sudo service nginx force-reload&quot;</span><br></pre></td></tr></table></figure>

<p><img src="/images/configure_nginx_https_certificate_ssl_reload.png" alt="images"></p>
<p>成功之后执行 <code>crontab -l</code> 可以看到有一个定时任务, 证书到期会自动续签</p>
<p><img src="/images/configure_nginx_https_certificate_crontab.png" alt="images"></p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://yq.aliyun.com/articles/541843">使用阿里云域名api申请Let’s Encrypt泛域名免费ssl证书</a></p>
]]></content>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>FastDFS 安装和入门</title>
    <url>/posts/fastdfs-install-and-basics.html</url>
    <content><![CDATA[<p>在传统的项目中计算机通过文件系统存储数据. 而现在各种微服务、负载均衡横行的时代, 文件会被多台服务器访问, 造成数据文件不能被存储在本地文件系统中.</p>
<p>传统的解决方法一般会有一台专门存储文件的服务器, 业务服务器的文件存储会通过 <code>ftp</code> 或 <code>ssh</code> 的方式上传到文件服务上. 这种方式被称为 <strong>网络文件系统</strong> 即 <code>NFS</code> (<code>Network File System</code>), 但是 <code>NFS</code> 在使用中也存在: 大量的访问磁盘 <code>IO</code>、存在单点故障、存储空间不足等缺点</p>
<p>为了解决 <code>NFS</code> 的缺点 <strong>分布式文件系统</strong> 即 <code>DFS</code> (<code>Distributed File System</code>) 应运而生. 分布式文件系统可以有效的解决数据的存储和管理难题; <code>DFS</code> 将固定某一地点的某个文件系统, 扩展到任意多个地点/多个文件系统, 众多节点组成一个文件系统网络. 每个节点可以分布在不同的地点, 通过网络进行节点间的通信和数据传输. 在使用分布式文件系统时, 无需关心数据是存储在哪个节点上、或者是从哪个节点从获取的, 只需要像使用本地文件系统一样管理和存储文件系统中的数据.</p>
<span id="more"></span>

<h4 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a><code>FastDFS</code></h4><p><code>FastDFS</code> 是一个由国人使用纯 <code>C</code> 开发的轻量级分布式文件系统, 在国内被广泛使用且有着良好的社区环境; 功能包括: 文件存储、文件同步、文件访问 (上传和下载) 等, 解决了大容量存储和负载均衡的问题特别适合已文件未载体的在线服务, <code>FastDFS</code> 针对小文件 (<code>4KB &lt; file_size &lt;500MB</code>) 存储更有优势. 除了 FastDFS 常用的分布式文件系统还有 <code>MooseFS</code>、<code>GlusterFS</code>、<code>Ceph</code>、<code>MogileFS</code>、<code>TFS</code> 等.</p>
<blockquote>
<p>目标环境: <code>Ubuntu 16.04</code>; 系统内核: <code>4.15.0-45-generic FastDFS: server v6.06</code></p>
</blockquote>
<h6 id="安装-libfatscommon"><a href="#安装-libfatscommon" class="headerlink" title="安装 libfatscommon"></a>安装 <code>libfatscommon</code></h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/happyfish100/libfastcommon.git --depth 1 &amp;&amp; libfastcommon/make.sh &amp;&amp; sudo libfastcommon/make.sh install</span><br></pre></td></tr></table></figure>

<h5 id="安装-FastDFS"><a href="#安装-FastDFS" class="headerlink" title="安装 FastDFS"></a>安装 <code>FastDFS</code></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mkdir -p /usr/<span class="built_in">local</span>/fastdfs</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/happyfish100/fastdfs.git --depth 1 &amp;&amp; fastdfs/make.sh &amp;&amp; sudo fastdfs/make.sh install</span><br><span class="line">$ sudo cp fastdfs/conf/http.conf /etc/fdfs/ &amp;&amp; sudo cp fastdfs/conf/mime.types /etc/fdfs/</span><br></pre></td></tr></table></figure>

<h5 id="安装-FastDFS-Nginx-模块"><a href="#安装-FastDFS-Nginx-模块" class="headerlink" title="安装 FastDFS Nginx 模块"></a>安装 <code>FastDFS Nginx</code> 模块</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget wget http://nginx.org/download/nginx-&#123;version&#125;.tar.gz &amp;&amp; tar -zxvf nginx-&#123;version&#125;.tar.gz</span><br><span class="line">$ sudo git <span class="built_in">clone</span> https://github.com/happyfish100/fastdfs-nginx-module.git --depth 1 /usr/<span class="built_in">local</span>/src/fastdfs-nginx-module</span><br><span class="line">$ sudo cp /usr/<span class="built_in">local</span>/src/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs</span><br></pre></td></tr></table></figure>

<p>这里如果你的服务器已经安装了 <code>nginx</code> 需要下载对应版本的包, 然后通过 <code>nginx -V</code> 命令获取当时的编译参数, 再在后面添加上 <code>--add-module=/usr/local/fastdfs-nginx-module/src/</code>, <code>make</code> 之后再将可执行文件覆盖原来的可执行文件. 例如我已经安装的 <code>nginx</code> 参数:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nginx version: nginx/1.10.3 (Ubuntu)</span><br><span class="line">built with OpenSSL 1.0.2g  1 Mar 2016</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --with-cc-opt=<span class="string">&#x27;-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2&#x27;</span> --with-ld-opt=<span class="string">&#x27;-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now&#x27;</span> --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_v2_module --with-http_sub_module --with-http_xslt_module --with-stream --with-stream_ssl_module --with-mail --with-mail_ssl_module --with-threads</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> nginx-&#123;version&#125;</span><br><span class="line">$ ./configure --prefix=/usr/<span class="built_in">local</span>/nginx --with-cc-opt=<span class="string">&#x27;-g -O2 -fPIE -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2&#x27;</span> --with-ld-opt=<span class="string">&#x27;-Wl,-Bsymbolic-functions -fPIE -pie -Wl,-z,relro -Wl,-z,now&#x27;</span> --prefix=/usr/share/nginx --conf-path=/etc/nginx/nginx.conf --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --lock-path=/var/lock/nginx.lock --pid-path=/run/nginx.pid --http-client-body-temp-path=/var/lib/nginx/body --http-fastcgi-temp-path=/var/lib/nginx/fastcgi --http-proxy-temp-path=/var/lib/nginx/proxy --http-scgi-temp-path=/var/lib/nginx/scgi --http-uwsgi-temp-path=/var/lib/nginx/uwsgi --with-debug --with-pcre-jit --with-ipv6 --with-http_ssl_module --with-http_stub_status_module --with-http_realip_module --with-http_auth_request_module --with-http_addition_module --with-http_dav_module --with-http_geoip_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module --with-http_v2_module --with-http_sub_module --with-http_xslt_module --with-stream --with-stream_ssl_module --with-mail --with-mail_ssl_module --with-threads --add-module=/usr/<span class="built_in">local</span>/src/fastdfs-nginx-module/src/</span><br></pre></td></tr></table></figure>

<p>如果已经安装了 <code>nginx</code> 那么就只执行 <code>make</code> 不要执行 <code>make install</code>, 执行 <code>make</code> 之后将 <code>objs/nginx</code> 覆盖原来的 <code>nginx</code> 可执行文件; 为了安全起见应该将原来的可执行文件备份一份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo mv /usr/sbin/nginx /usr/sbin/nginx.bak &amp;&amp; sudo mv objs/nginx /usr/sbin/nginx</span><br></pre></td></tr></table></figure>

<h4 id="启动-FastDFS"><a href="#启动-FastDFS" class="headerlink" title="启动 FastDFS"></a>启动 <code>FastDFS</code></h4><p><code>FastDFS</code> 分布式文件系统有三个角色: 跟踪服务器 (<code>Tracker Server</code>)、存储服务器 (<code>Storage Server</code>) 和客户端 (<code>Client</code>):</p>
<ul>
<li><p>跟踪服务器 (<code>Tracker Server</code>): 主要做调度工作, 起到均衡的作用; 负责管理所有的 <code>storage server</code> 和 <code>group</code>, 每个 <code>storage</code> 在启动后会连接 <code>Tracker</code>, 告知自己所属 <code>group</code> 等信息, 并保持周期性心跳.</p>
</li>
<li><p>存储服务器 (<code>Storage Server</code>): 存储服务器, 主要提供容量和备份服务; 以 <code>group</code> 为单位, 每个 <code>group</code> 内可以有多台 <code>storage server</code>, 数据互为备份.</p>
</li>
<li><p>客户端 (<code>Client</code>): 客户端, 传下载数据的服务器, 也就是项目所部署的服务器</p>
</li>
</ul>
<h5 id="配置启动-Tracker-Server"><a href="#配置启动-Tracker-Server" class="headerlink" title="配置启动 Tracker Server"></a>配置启动 <code>Tracker Server</code></h5><ul>
<li>修改配置文件 <code>sudo cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf &amp;&amp; sudo vim /etc/fdfs/tracker.conf</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port=22122  <span class="comment"># tracker服务器端口（默认22122,一般不修改）</span></span><br><span class="line">base_path=/usr/<span class="built_in">local</span>/fastdfs  <span class="comment"># 存储日志和数据的根目录</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动 <code>Tracker Server</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/fdfs_trackerd start <span class="comment">#启动tracker服务</span></span><br><span class="line">sudo /etc/init.d/fdfs_trackerd restart <span class="comment">#重启动tracker服务</span></span><br><span class="line">sudo /etc/init.d/fdfs_trackerd stop <span class="comment">#停止tracker服务</span></span><br><span class="line">sudo chkconfig fdfs_trackerd on <span class="comment">#自启动tracker服务</span></span><br></pre></td></tr></table></figure>

<h5 id="配置启动-Storage-Server"><a href="#配置启动-Storage-Server" class="headerlink" title="配置启动 Storage Server"></a>配置启动 <code>Storage Server</code></h5><ul>
<li>修改配置文件 <code>sudo cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf &amp;&amp; sudo vim /etc/fdfs/storage.conf</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">port=23000  <span class="comment"># storage服务端口（默认23000,一般不修改）</span></span><br><span class="line">base_path=/usr/<span class="built_in">local</span>/fastdfs  <span class="comment"># 数据和日志文件存储根目录</span></span><br><span class="line">store_path0=/usr/<span class="built_in">local</span>/fastdfs  <span class="comment"># 第一个存储目录</span></span><br><span class="line">tracker_server=192.168.52.2:22122  <span class="comment"># 服务器1</span></span><br><span class="line">tracker_server=192.168.52.3:22122  <span class="comment"># 服务器2</span></span><br><span class="line">tracker_server=192.168.52.4:22122  <span class="comment"># 服务器3</span></span><br><span class="line">http.server_port=8888  <span class="comment"># http访问文件的端口(默认8888,看情况修改,和nginx中保持一致)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>启动 <code>Storage Server</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/fdfs_storaged start <span class="comment">#启动storage服务</span></span><br><span class="line">sudo /etc/init.d/fdfs_storaged restart <span class="comment">#重动storage服务</span></span><br><span class="line">sudo /etc/init.d/fdfs_storaged stop <span class="comment">#停止动storage服务</span></span><br><span class="line">sudo chkconfig fdfs_storaged on <span class="comment">#自启动storage服务</span></span><br></pre></td></tr></table></figure>

<h5 id="配置客户端并测试"><a href="#配置客户端并测试" class="headerlink" title="配置客户端并测试"></a>配置客户端并测试</h5><ul>
<li>修改配置文件 <code>sudo cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf &amp;&amp; sudo vim /etc/fdfs/client.conf</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">base_path=/usr/<span class="built_in">local</span>/fastdfs</span><br><span class="line">tracker_server=192.168.52.2:22122  <span class="comment"># 服务器1</span></span><br><span class="line">tracker_server=192.168.52.3:22122  <span class="comment"># 服务器2</span></span><br><span class="line">tracker_server=192.168.52.4:22122  <span class="comment"># 服务器3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试: 如果正确返回路径则代表成功</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ fdfs_upload_file /etc/fdfs/client.conf  filename</span><br></pre></td></tr></table></figure>

<h5 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h5><ul>
<li>修改配置文件 <code>sudo vim /etc/fdfs/mod_fastdfs.conf</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tracker_server=192.168.52.2:22122  <span class="comment"># 服务器1</span></span><br><span class="line">tracker_server=192.168.52.3:22122  <span class="comment"># 服务器2</span></span><br><span class="line">tracker_server=192.168.52.4:22122  <span class="comment"># 服务器3</span></span><br><span class="line">url_have_group_name=<span class="literal">true</span></span><br><span class="line">store_path0=/usr/<span class="built_in">local</span>/fastdfs</span><br></pre></td></tr></table></figure>

<ul>
<li>添加配置文件 <code>sudo vim /etc/nginx/conf.d/fastdfs.conf</code></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8888;    <span class="comment">## 该端口为storage.conf中的http.server_port相同</span></span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location ~/group[0-9]/ &#123;</span><br><span class="line">        ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">    root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后通过 <code>http://192.168.52.2:8888/group1/M00/00/00/xxx.x</code> 访问测试上传的文件是否成功就可以了</p>
<h4 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h4><ul>
<li><a href="https://github.com/happyfish100/fastdfs/wiki">FastDFS Wiki</a></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>FastDFS</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 使用记录和常用命令收集</title>
    <url>/posts/git-usage-record.html</url>
    <content><![CDATA[<p>规范明确, 清晰, 一致的 Git 分支管理, 可以帮助在多人协作时更加和谐.</p>
<p>每个人对工具的使用往往各有偏好, 各种方法各有利弊, 无所谓对错. 但涉及团队协作的方面需要有一些一致的规范, 遵守一致的规范也能提升大家的效率.</p>
<p><img src="/images/git-desc-page.png" alt="image"></p>
<p>除了一致性之外，这个规范的目的是以下几点:</p>
<ul>
<li>确保可以轻易确定特定时间发布或运行的版本. 在新发布的程序存在重大缺陷时, 可以尽快 <code>rollback</code> 到上一个稳定版本.</li>
<li>在需要修复紧急 <code>bug</code> 并尽快发布时, 可以只发布必要的 <code>bugfix</code> 而不同时发布还不应发布的其他改动.</li>
</ul>
<span id="more"></span>

<h4 id="Git-分支管理使用规范"><a href="#Git-分支管理使用规范" class="headerlink" title="Git 分支管理使用规范"></a><code>Git</code> 分支管理使用规范</h4><h5 id="branch-和-tag"><a href="#branch-和-tag" class="headerlink" title="branch 和 tag"></a><code>branch</code> 和 <code>tag</code></h5><blockquote>
<p>每个项目的 <code>repo</code> 都应该含有且仅有以下的 <code>branch</code> 和 <code>tag</code></p>
</blockquote>
<p><strong>Branch</strong>: <code>master</code> 和 <code>release</code>, 其中 <code>master</code> 对应目前的开发分支, 所有的 <code>pull request</code> 都应该发到这个分支. <code>release</code> 是当前发布的分支，在这个分支只能增加从 <code>master</code> <code>cherrypick</code> 过来的 <code>commit</code>.</p>
<p><strong>Tag</strong>: 对应每个发布版本的 <code>tag</code>, <code>SDK</code> 和应用程序的 <code>tag</code> 应该遵照 <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;</code> 的命名风格，如 2.5.1；服务端程序的 <code>tag</code> 以发布的日期命名, 如 <code>2014.11.13</code>, <code>bugfix</code> 的 <code>tag</code> 应该遵从 <code>&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;-bugfix</code> 的风格, 如果 <code>tag</code> 已经存在, 则可以使用在后面添加小写字母的方式延续, 例如 <code>2.5.2-bugfix</code> 后面就是 <code>2.5.2-bugfix-a</code>.</p>
<blockquote>
<p>在一个 <code>repo</code> 中只应该有以上说的 <code>branch</code> 和 <code>tag</code>, 在开发过程中使用到的 <code>feature branch</code> 等请都放在个人的 <code>fork</code>, 一律通过向 <code>master</code> 发 <code>pull request</code> 的方式给 <code>repo</code> 提交代码。</p>
</blockquote>
<h5 id="新版本发布流程"><a href="#新版本发布流程" class="headerlink" title="新版本发布流程"></a>新版本发布流程</h5><ul>
<li>确保所有要发布的 <code>pull request</code> 都已经 <code>merge</code> 到 <code>master</code>;</li>
<li>使用 <code>master branch</code> 的代码进行测试, 如果发现 <code>bug</code>, 把对应的 <code>bugfix</code> <code>merge</code> 到 <code>master</code>;</li>
<li>删除旧的 <code>release branch</code>, 并从当前的 <code>master</code> 创建新的 <code>release branch</code>; </li>
<li>发布完成后在当前的 <code>release branch</code> 打上对应版本的 <code>tag</code>.</li>
</ul>
<h5 id="Bugfix-流程"><a href="#Bugfix-流程" class="headerlink" title="Bugfix 流程"></a><code>Bugfix</code> 流程</h5><p>这里的 <code>bugfix</code> 指的是修复已经发布的程序（<code>release branch</code>）中的缺陷. <code>master</code> 里的 <code>bug</code> 请直接 <code>merge bugfix</code> 到 <code>master</code>.</p>
<ul>
<li>如果此缺陷在 <code>master</code> 中还存在，请先 <code>merge bugfix</code> 到 <code>master</code>, 否则跳到下一步;</li>
<li>在 <code>release branch</code> 从 <code>master cherrypick</code> 修复该缺陷的一个或多个 <code>commit</code>;</li>
<li>发布完成后在当前的 <code>release branch</code> 打上 <code>tag</code>. </li>
</ul>
<blockquote>
<p>并不是每个 <code>bug</code> 都有专门发布 <code>bugfix</code> 版的必要, 对于不紧急的 <code>bug</code>, 可以在 <code>master</code> 里修复后随下一个版本发布</p>
</blockquote>
<h4 id="Git-常用命令收集"><a href="#Git-常用命令收集" class="headerlink" title="Git 常用命令收集"></a><code>Git</code> 常用命令收集</h4><h5 id="撤销本次-Merge"><a href="#撤销本次-Merge" class="headerlink" title="撤销本次 Merge"></a>撤销本次 <code>Merge</code></h5><p>开发过程中, 多多少少总会出现在版本快要上线准备提交代码时, 某个功能延后或剔除的情况, 无奈只能将本次的 <code>merge</code> 撤销掉.</p>
<h6 id="快进合并下和修复完冲突的-Merge-撤销"><a href="#快进合并下和修复完冲突的-Merge-撤销" class="headerlink" title="快进合并下和修复完冲突的 Merge 撤销"></a>快进合并下和修复完冲突的 <code>Merge</code> 撤销</h6><p>找到最后一次提交到 <code>master</code> 分支的版本号，即 <code>merge</code> 前的版本号, 并直接回滚</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --hard (merge 前的 commit id)</span><br></pre></td></tr></table></figure>

<h6 id="含有冲突的情况下-Merge-撤销"><a href="#含有冲突的情况下-Merge-撤销" class="headerlink" title="含有冲突的情况下 Merge 撤销"></a>含有冲突的情况下 <code>Merge</code> 撤销</h6><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git reset --merge</span><br></pre></td></tr></table></figure>

<h5 id="Git-更新单个指定文件"><a href="#Git-更新单个指定文件" class="headerlink" title="Git 更新单个指定文件"></a><code>Git</code> 更新单个指定文件</h5><p>在 <code>Laravel/Lumen</code> 项目中, 有的时候我们会通过 <code>composer</code> 增加新的扩展包, 在版本发布的时候就需要先更新 <code>composer.json</code> 和 <code>composer.lock</code> 两个文件, 然后执行 <code>composer install</code> 确保服务不会因为缺少扩展包出错.</p>
<p>如果想拿远端 <code>git</code> 服务器上的最新版本 (或某个特定版本) 覆盖本地的修改, 可以使用 <code>git pull</code> 命令, 但这会 <strong>全面更新本地代码库和工作拷贝</strong>; 想放弃本地工作拷贝所做修改, 可以使用 <code>git checkout file/to/path</code> 命令, 但该命令只能用本地库覆盖你的工作拷贝, 并不能取得远端版本的更新.</p>
<p>正确的做法应该是先更新本地库 (但不更新工作拷贝), 然后用本地库来更新单个的工作拷贝文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch</span><br><span class="line">$ git checkout origin/master -- composer.json</span><br><span class="line">$ git checkout origin/master -- composer.lock</span><br></pre></td></tr></table></figure>

<h5 id="git-log-乱码问题解决"><a href="#git-log-乱码问题解决" class="headerlink" title="git log 乱码问题解决"></a><code>git log</code> 乱码问题解决</h5><p><img src="/images/git-log-garbled.png" alt="image"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在环境变量中增加如下参数</span></span><br><span class="line"><span class="built_in">export</span> LESSCHARSET=utf-8</span><br></pre></td></tr></table></figure>

<h5 id="git-summary-使用"><a href="#git-summary-使用" class="headerlink" title="git summary 使用"></a><code>git summary</code> 使用</h5><p><code>git summary</code> 可以查看所有贡献者对项目的贡献程度</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这个命令默认没有,在mac下需要通过 ``brew install git-extras`` 安装</span></span><br><span class="line">$ git summary</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>DES/AES 对称加密</title>
    <url>/posts/des-aes-symmetric-encrypt.html</url>
    <content><![CDATA[<p><strong>对称加密</strong> (<code>Symmetric-key algorithm</code>) 又被称为: 对称秘钥加密、私钥加密、共享密钥加密. 是密码学中一个种加密算法, 这类加密算法在加密和解密时需要使用到同一个秘钥. 根据不同的加密算法秘钥长度也不同, 一般在 64bit ~ 256bit 之间, 具体长度取决于所需的安全级别, 但是秘钥长度越长加密和解密所需要消耗的资源越多. 常用的对称加密算法有: <code>DES (Data Encrytion Standard)</code>、<code>3DES (Triple DES)</code>、<code>AES (Advanced Encryption Standard)</code> 等;</p>
<span id="more"></span>

<h4 id="DES-加密"><a href="#DES-加密" class="headerlink" title="DES 加密"></a><code>DES</code> 加密</h4><p><code>Data Encrytion Standard</code> 简称 <code>DES</code>, <code>DES</code> 是一种分组加密算法, 以 <code>64bit</code> 为单位将明文分割并加密. <code>DES</code> 的秘钥长度也是 <code>64bit</code> (8字节), 每个字节中 <code>1bit</code>-<code>7bit</code> 为数据位, 第 <code>8bit</code> 为 <strong>64bit</strong> , 也就是说秘钥中: <code>8bit</code>、<code>16bit</code>、<code>24bit</code>、<code>32bit</code>、<code>40bit</code>、<code>48bit</code>、<code>56bit</code>、<code>64bit</code> 都是 <strong>校验位</strong> , 所以也有 <code>DES</code> 的秘钥长度为 <code>56bit</code> 的说法. 美国国家标准局于 1977 年公布把它作为非机要部门使用的数据加密标准，三十年来，它一直活跃在国际保密通信的舞台上，扮演了十分重要的角色. 但随着计算机的进步, <code>DES</code> <strong>已经能够被暴力破解</strong>.</p>
<h5 id="3DES-加密"><a href="#3DES-加密" class="headerlink" title="3DES 加密"></a><code>3DES</code> 加密</h5><p>三重 <code>DES</code> 加密 (<code>Triple DES</code>) 简称 <code>3DES</code>. 现在 <code>DES</code> 已经可以暴力破解, 所以需要一种分组加密算法来代替 <code>DES</code>, 而 <code>3DES</code> 由此被开发出来代替 <code>DES</code>. <code>3DES</code> 可以看做是 <code>DES</code> 的升级版.</p>
<p><img src="/images/3des-flow.png" alt="image"></p>
<blockquote>
<p><code>3DES</code> 的秘钥可分为三部分: <code>K1</code>、<code>K2</code>、<code>K3</code>, 三个秘钥决定了加密的安全性. 若数据安全性要求不那么高, <code>K1</code> 可以等于 <code>K3</code>, 也可以 <code>K1</code>、<code>K2</code>、<code>K3</code> 都使用同一秘钥 (相当于 <code>DES</code> 加密, 多此一举还耗费资源)</p>
</blockquote>
<h4 id="AES-加密"><a href="#AES-加密" class="headerlink" title="AES 加密"></a>AES 加密</h4><p>高级加密标准 (<code>Advanced Encryption Standard</code>) 简称 <code>AES</code>, 在 <code>DES</code> 可被暴力破解不再安全之后, <code>AES</code> 能够抵御已知的针对 <code>DES</code> 算法的所有攻击, 且比 <code>3DES</code> 加密效率更高, 安全性也更高</p>
<p><code>AES</code> 也是分组加密算法, <code>AES</code> 的区块长度固定为 <code>128bit</code>, 秘钥长度则可以为 <code>128bit</code>、<code>192bit</code> 或 <code>192bit</code> (<code>golang</code> 中只支持 <code>128bit</code> 和 <code>192bit</code> 长度的秘钥); 加密过程中使用的密钥是由 <code>Rijndael</code> 密钥生成方案 产生.</p>
<h4 id="加密模式"><a href="#加密模式" class="headerlink" title="加密模式"></a>加密模式</h4><p>密码学中, 分组（<code>block</code>）密码的工作模式（<code>mode of operation</code>）允许使用同一个分组密码密钥对多于一块的数据进行加密, 并保证其安全性. 分组密码自身只能加密长度等于密码分组长度的单块数据, 若要加密变长数据, 则数据必须先被划分为一些单独的密码块. 通常而言, 最后一块数据也需要使用合适填充方式将数据扩展到符合密码块大小的长度. 一种工作模式描述了加密每一数据块的过程, 并常常使用基于一个通常称为初始化向量的附加输入值以进行随机化, 以保证安全.</p>
<blockquote>
<p>所有加密模式图示和代码示例只提供加密过程, 如需解密过程请根据加密过程反推</p>
</blockquote>
<h5 id="ECB-模式"><a href="#ECB-模式" class="headerlink" title="ECB 模式"></a><code>ECB</code> 模式</h5><p>电子密码本模式 (<code>Electronic codebook</code>) 简称 <code>ECB</code>, 需要加密的消息按照块密码的块大小被分为数个块, 并对每个块进行独立加密. 这样的加密方式会让密文有规律, 安全性较低, 常用在对数据安全性要求不高的场景. 加密过程图示:</p>
<p><img src="/images/ecb-cipher-mode.png" alt="image"></p>
<h6 id="DES-ECB-模式加密和解密实现"><a href="#DES-ECB-模式加密和解密实现" class="headerlink" title="DES ECB 模式加密和解密实现:"></a><code>DES ECB</code> 模式加密和解密实现:</h6><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/des&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The CBC mode and the ECB mode, there are strict limits on the size of the groups,</span></span><br><span class="line"><span class="comment">// During encryption, if the last group of the plaintext does not meet the group size,</span></span><br><span class="line"><span class="comment">// You need to fill in the group size</span></span><br><span class="line"><span class="comment">// By convention, the value of the supplementary array to be filled</span></span><br><span class="line"><span class="comment">// should be (block size - current size).</span></span><br><span class="line"><span class="comment">// If the clear text is just big enough to be grouped,</span></span><br><span class="line"><span class="comment">// then by convention you should also populate a whole set of data with a value of block size</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">paddingLastGroup</span><span class="params">(plaintext []<span class="keyword">byte</span>, blockSize <span class="keyword">int</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	padNum := blockSize - <span class="built_in">len</span>(plaintext)%blockSize</span><br><span class="line">	char := []<span class="keyword">byte</span>&#123;<span class="keyword">byte</span>(padNum)&#125;</span><br><span class="line">	newPlain := bytes.Repeat(char, padNum)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">append</span>(plaintext, newPlain...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// According to the previous fill specification,</span></span><br><span class="line"><span class="comment">// the fill data in the plaintext after decryption needs to be removed</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unPaddingLastGroup</span><span class="params">(plaintext []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(plaintext)</span><br><span class="line">	<span class="keyword">return</span> plaintext[:length - <span class="keyword">int</span>(plaintext[length - <span class="number">1</span>])]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">desEncrypt</span><span class="params">(plaintext, key []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	block, err := des.NewCipher(key)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	newPlain := paddingLastGroup(plaintext, block.BlockSize())</span><br><span class="line">	block.Encrypt(newPlain, newPlain)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> newPlain</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">desDecrypt</span><span class="params">(cipherText, key []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span>  &#123;</span><br><span class="line">	block, err := des.NewCipher(key)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	block.Decrypt(cipherText, cipherText)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> unPaddingLastGroup(cipherText)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	str := <span class="string">&quot;this test string&quot;</span></span><br><span class="line">	key := []<span class="keyword">byte</span>(<span class="string">&quot;12345678&quot;</span>)</span><br><span class="line">	cipherText := desEncrypt([]<span class="keyword">byte</span>(str), key)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;After encryption: %v\n&quot;</span>, cipherText)</span><br><span class="line">	plaintext := desDecrypt(cipherText, key)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;After decryption: %s\n&quot;</span>, <span class="keyword">string</span>(plaintext))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="CBC-模式"><a href="#CBC-模式" class="headerlink" title="CBC 模式"></a><code>CBC</code> 模式</h5><p>密码分组链接 (<code>Cipher-block chaining</code>) 简称 <code>CBC</code>, 在 <code>CBC</code> 模式中, 每个明文块先与前一个密文块进行异或后, 再进行加密. 在这种方法中, 每个密文块都依赖于它前面的所有明文块. 同时, 为了保证每条消息的唯一性, 在第一个块中需要使用初始化向量.</p>
<p><img src="/images/cbc-cipher-mode.png" alt="image"></p>
<blockquote>
<p><code>IV</code> 初始化向量: 初始化向量 (<code>Initialization Vector</code>) 是许多任务作模式中用于将加密随机化的一个位块, 由此即使同样的明文被多次加密也会产生不同的密文, 避免了较慢的重新产生密钥的过程. 初始化向量与密钥相比有不同的安全性需求, 因此IV通常无须保密, 然而在大多数情况中, 不应当在使用同一密钥的情况下两次使用同一个 <code>IV</code>.</p>
</blockquote>
<h6 id="DES-CBC-模式加密和解密实现"><a href="#DES-CBC-模式加密和解密实现" class="headerlink" title="DES CBC 模式加密和解密实现"></a><code>DES CBC</code> 模式加密和解密实现</h6><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;bytes&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/cipher&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/des&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// The CBC mode and the ECB mode, there are strict limits on the size of the groups,</span></span><br><span class="line"><span class="comment">// During encryption, if the last group of the plaintext does not meet the group size,</span></span><br><span class="line"><span class="comment">// You need to fill in the group size</span></span><br><span class="line"><span class="comment">// By convention, the value of the supplementary array to be filled</span></span><br><span class="line"><span class="comment">// should be (block size - current size).</span></span><br><span class="line"><span class="comment">// If the clear text is just big enough to be grouped,</span></span><br><span class="line"><span class="comment">// then by convention you should also populate a whole set of data with a value of block size</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">paddingLastGroup</span><span class="params">(plaintext []<span class="keyword">byte</span>, blockSize <span class="keyword">int</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	padNum := blockSize - <span class="built_in">len</span>(plaintext)%blockSize</span><br><span class="line">	char := []<span class="keyword">byte</span>&#123;<span class="keyword">byte</span>(padNum)&#125;</span><br><span class="line">	newPlain := bytes.Repeat(char, padNum)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">append</span>(plaintext, newPlain...)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// According to the previous fill specification,</span></span><br><span class="line"><span class="comment">// the fill data in the plaintext after decryption needs to be removed</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">unPaddingLastGroup</span><span class="params">(plaintext []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	length := <span class="built_in">len</span>(plaintext)</span><br><span class="line">	<span class="keyword">return</span> plaintext[:length-<span class="keyword">int</span>(plaintext[length<span class="number">-1</span>])]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">desEncrypt</span><span class="params">(plaintext, key, iv []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	block, err := des.NewCipher(key)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	newPlain := paddingLastGroup(plaintext, block.BlockSize())</span><br><span class="line">	blockMode := cipher.NewCBCEncrypter(block, iv)</span><br><span class="line">	blockMode.CryptBlocks(newPlain, newPlain)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> newPlain</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">desDecrypt</span><span class="params">(cipherText, key, iv []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	block, err := des.NewCipher(key)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	blockMode := cipher.NewCBCDecrypter(block, iv)</span><br><span class="line">	blockMode.CryptBlocks(cipherText, cipherText)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> unPaddingLastGroup(cipherText)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	str := <span class="string">&quot;this test string&quot;</span></span><br><span class="line">	key := []<span class="keyword">byte</span>(<span class="string">&quot;12345678&quot;</span>)</span><br><span class="line">	iv := []<span class="keyword">byte</span>(<span class="string">&quot;abcdefgh&quot;</span>)</span><br><span class="line">	cipherText := desEncrypt([]<span class="keyword">byte</span>(str), key, iv)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;After encryption: %v\n&quot;</span>, cipherText)</span><br><span class="line">	plaintext := desDecrypt(cipherText, key, iv)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;After decryption: %s\n&quot;</span>, <span class="keyword">string</span>(plaintext))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="CFB-模式"><a href="#CFB-模式" class="headerlink" title="CFB 模式"></a><code>CFB</code> 模式</h5><p>密文反馈 (<code>Cipher feedback</code>) 简称 <code>CFB</code>, 类似于 <code>CBC</code>, 可以将块密码变为自同步的流密码; 工作过程亦非常相似, CFB的解密过程几乎就是颠倒的 <code>CBC</code> 的加密过程：</p>
<p><img src="/images/cfb-cipher-mode.png" alt="image"></p>
<h6 id="DES-CFB-模式加密和解密实现"><a href="#DES-CFB-模式加密和解密实现" class="headerlink" title="DES CFB 模式加密和解密实现"></a><code>DES CFB</code> 模式加密和解密实现</h6><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/cipher&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/des&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">desEncrypt</span><span class="params">(plaintext, key, iv []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	block, err := des.NewCipher(key)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	blockMode := cipher.NewCFBEncrypter(block, iv)</span><br><span class="line">	blockMode.XORKeyStream(plaintext, plaintext)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> plaintext</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">desDecrypt</span><span class="params">(cipherText, key, iv []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	block, err := des.NewCipher(key)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	blockMode := cipher.NewCFBDecrypter(block, iv)</span><br><span class="line">	blockMode.XORKeyStream(cipherText, cipherText)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> cipherText</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	str := <span class="string">&quot;this test string&quot;</span></span><br><span class="line">	key := []<span class="keyword">byte</span>(<span class="string">&quot;12345678&quot;</span>)</span><br><span class="line">	iv := []<span class="keyword">byte</span>(<span class="string">&quot;abcdefgh&quot;</span>)</span><br><span class="line">	cipherText := desEncrypt([]<span class="keyword">byte</span>(str), key, iv)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;After encryption: %v\n&quot;</span>, cipherText)</span><br><span class="line">	plaintext := desDecrypt(cipherText, key, iv)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;After decryption: %s\n&quot;</span>, <span class="keyword">string</span>(plaintext))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="OFB-模式"><a href="#OFB-模式" class="headerlink" title="OFB 模式"></a><code>OFB</code> 模式</h5><p>输出反馈模式 (<code>Output feedback</code>) 简称 <code>OFB</code>, 可以将块密码变成同步的流密码. 它产生密钥流的块, 然后将其与明文块进行异或, 得到密文. 与其它流密码一样, 密文中一个位的翻转会使明文中同样位置的位也产生翻转. 这种特性使得许多错误校正码, 例如奇偶校验位, 即使在加密前计算, 而在加密后进行校验也可以得出正确结果.</p>
<p><img src="/images/ofb-cipher-mode.png" alt="image"></p>
<h6 id="DES-OFB-模式加密和解密实现"><a href="#DES-OFB-模式加密和解密实现" class="headerlink" title="DES OFB 模式加密和解密实现"></a><code>DES OFB</code> 模式加密和解密实现</h6><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/cipher&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/des&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">desOfbEncryptOrDecrypt</span><span class="params">(plaintext, key, iv []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	block, err := des.NewCipher(key)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	blockMode := cipher.NewOFB(block, iv)</span><br><span class="line">	blockMode.XORKeyStream(plaintext, plaintext)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> plaintext</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	str := <span class="string">&quot;this test string&quot;</span></span><br><span class="line">	key := []<span class="keyword">byte</span>(<span class="string">&quot;12345678&quot;</span>)</span><br><span class="line">	iv := []<span class="keyword">byte</span>(<span class="string">&quot;abcdefgh&quot;</span>)</span><br><span class="line">	cipherText := desOfbEncryptOrDecrypt([]<span class="keyword">byte</span>(str), key, iv)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;After encryption: %v\n&quot;</span>, cipherText)</span><br><span class="line">	plaintext := desOfbEncryptOrDecrypt(cipherText, key, iv)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;After decryption: %s\n&quot;</span>, <span class="keyword">string</span>(plaintext))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="CTR-模式"><a href="#CTR-模式" class="headerlink" title="CTR 模式"></a><code>CTR</code> 模式</h5><p>计数器模式 (<code>Counter mode</code>) 简称 <code>CTR</code> (也被称为 整数计数模式 (<code>Integer Counter Mode</code>) 继承 <code>ICM</code> 或 <code>SIC</code>（<code>Segmented Integer Counter</code>）), 与 <code>OFB</code> 相似, <code>CTR</code> 将块密码变为流密码. 它通过递增一个加密计数器以产生连续的密钥流, 其中, 计数器可以是任意保证长时间不产生重复输出的函数, 但使用一个普通的计数器是最简单和最常见的做法.</p>
<p>注意图中的 “随机数” 与其它图中的 <code>IV</code> (初始化向量) 相同。<code>IV</code>、随机数和计数器均可以通过连接, 相加或异或使得相同明文产生不同的密文</p>
<p><img src="/images/ctr-cipher-mode.png" alt="image"></p>
<h6 id="DES-CTR-模式加密和解密实现"><a href="#DES-CTR-模式加密和解密实现" class="headerlink" title="DES CTR 模式加密和解密实现"></a><code>DES CTR</code> 模式加密和解密实现</h6><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/cipher&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/des&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">desCtrEncryptOrDecrypt</span><span class="params">(plaintext, key, iv []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	block, err := des.NewCipher(key)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	blockMode := cipher.NewCTR(block, iv)</span><br><span class="line">	blockMode.XORKeyStream(plaintext, plaintext)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> plaintext</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	str := <span class="string">&quot;this test string&quot;</span></span><br><span class="line">	key := []<span class="keyword">byte</span>(<span class="string">&quot;12345678&quot;</span>)</span><br><span class="line">	iv := []<span class="keyword">byte</span>(<span class="string">&quot;abcdefgh&quot;</span>)</span><br><span class="line">	cipherText := desCtrEncryptOrDecrypt([]<span class="keyword">byte</span>(str), key, iv)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;After encryption: %v\n&quot;</span>, cipherText)</span><br><span class="line">	plaintext := desCtrEncryptOrDecrypt(cipherText, key, iv)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;After decryption: %s\n&quot;</span>, <span class="keyword">string</span>(plaintext))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B3%87%E6%96%99%E5%8A%A0%E5%AF%86%E6%A8%99%E6%BA%96">数据加密标准</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E7%BA%A7%E5%8A%A0%E5%AF%86%E6%A0%87%E5%87%86">高级加密标准</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%88%86%E7%BB%84%E5%AF%86%E7%A0%81%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F">分组密码工作模式</a></li>
</ul>
]]></content>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 进程热重启</title>
    <url>/posts/golang-progress-reload.html</url>
    <content><![CDATA[<p>There are only 10 kinds of people in the world, one is a person who understands binary, and the other is a person who does not understand binary.</p>
<p>代码需要升级; 配置文件需要更新. 如果在 <code>PHP</code> 中这些都很简单, 一个简单的 <code>vim</code> 或 <code>git pull</code> 就能解决. 可是像 <code>Golang</code> 这样的静态语言就无法做到像 <code>PHP</code> 中的那么灵活. 在线上的生产环境, 我们必须保证新老服务无缝交替. 如果贸然停掉服务, 就可能造成一些问题; 例如:</p>
<ul>
<li>旧的请求未完成, 服务端进程直接退出, 会造成客户端链接中断</li>
<li>新的请求发送过来, 服务端还未完成重启, 造成 <code>connection refused</code></li>
<li>旧的请求未处理完成, 服务端进程直接退出, 可能会造成用户数据不对称(即: 用户已完成一部分操作, 还要一部分未完成)</li>
</ul>
<p>当然; 这些问题都可以通过其他方法去规避. 例如使用负载均衡(如: <code>nginx</code>), 保证在升级的过程中始终有一个服务可用, 即各服务器依次灰度升级. 但是像 <code>nginx -s reload</code> 这种的方式, 好像更加方便</p>
<span id="more"></span>

<h4 id="什么是-热启动"><a href="#什么是-热启动" class="headerlink" title="什么是 热启动"></a>什么是 <strong>热启动</strong></h4><p>热启动也可以叫平滑启动, 其思想就是新老程序 (<strong>进程</strong>) 无缝交替, 一直保持对客户端的服务, 让客户端感觉不到服务的重启. 且新程序启动之后所有新的请求会直接打到新程序, 老程序处理完旧请求之后(或超时)安全(或超时)退出.</p>
<p>其实现原理就是拦截 <code>Linux</code> 的信号, 例如 <code>nginx -s reload</code> 就是给 <code>nginx</code> 发送一个表示 “注意: 我需要重启啦” 这样的信号. 当 <code>nginx</code> 接收到这样的信号的时候, 就会 <code>fork</code> 一个子进程, 并将父进程的 <code>socket</code> 句柄交给子进程 ,将新的请求打到子进程中, 父进程在处理完旧进程之后安全退出. 父进程安全退出之后, 子进程会被 <code>Linux</code> 的 <code>init</code> 进程领养成为新的 <code>nginx</code> 进程. 如此循环</p>
<h5 id="Linux-Unix-下三个特殊进程和孤儿进程"><a href="#Linux-Unix-下三个特殊进程和孤儿进程" class="headerlink" title="Linux/Unix 下三个特殊进程和孤儿进程"></a>Linux/Unix 下三个特殊进程和孤儿进程</h5><p>在编写代码之前, 我们先来了解一下 <code>Linux/Unix</code> 下三个特殊的进程 <code>idle</code>、<code>init</code>、<code>kthreadd</code> 以及什么是 <strong>孤儿进程</strong> </p>
<ul>
<li><code>idle</code> 进程: </li>
</ul>
<p><code>PID</code> 为 0, 其前身是系统创建的第一个进程, 也是 <strong>唯一</strong> 一个不是被 <code>fork</code> 或 <code>kernel_thread</code> 创建的进程; 完成加载系统后, 演变为进程调度, 交换</p>
<ul>
<li><code>init</code> 进程: </li>
</ul>
<p><code>PID</code> 为 1, 由 <code>idle</code> 进程通过 <code>kernel_thread</code> 创建. 在内核空间初始化完成以后, 加载 <code>init</code> 进程. 在 <code>linux</code> 中所有进程都是由 <code>init</code> 进程创建并运行(PS: PID 为 0、1、2 的除外)的</p>
<p><img src="/images/go-hot-reload-progress-ppid.png" alt="image"></p>
<ul>
<li><code>kthreadd</code> 进程: </li>
</ul>
<p><code>PID</code> 为 2, 也是由 <code>idel</code> 进程通过 <code>kernel_thread</code> 创建. <code>kthreadd</code> 进程始终运行在内核中, 它的任务就是管理和调度其他内核线程 <code>kernel_thread</code>, 它会 <strong>循环</strong> 执行一个 <code>kthread</code> 函数, 该函数的作用就是运行 <code>kthread_create_list</code> 全局链表中的 <code>kthread</code>. 当我们调用 <code>kernel_therad</code> 创建内核线程时, 该线程会被加入到 <code>kthread_create_list</code> 链表中, 所以所有的内核线程都是直接或间接的以 <code>kthreadd</code> 为父进程</p>
<ul>
<li><strong>孤儿进程</strong> : </li>
</ul>
<p>除 <code>idle</code> 进程以外的所有进程都有一个父进程(<code>init</code> 和 <code>kthreadd</code> 的父进程就是 <code>idle</code>), 但是进程是可以被 <strong>杀死</strong> 的.当一个进程退出, 而它有一个或多个进程还在运行, 那么这些子进程就会因为父进程被 <code>Kill</code> 掉变成没有父进程的进程, 这种进程我们就称为孤儿进程. 但是孤儿进程显然不符合 <code>Linux/Unix</code> 的进程规范. 所以在父进程表 <code>Kill</code> 掉以后, <code>init</code> 会领养这样的孤儿进程, 由 <code>init</code> 作为它们的父进程.</p>
<h5 id="演示-孤儿进程-被-Init-收养"><a href="#演示-孤儿进程-被-Init-收养" class="headerlink" title="演示 孤儿进程 被 Init 收养"></a>演示 <strong>孤儿进程</strong> 被 <code>Init</code> 收养</h5><blockquote>
<p>在 Unix 中, 创建进程是通过系统调用 <code>fork</code> 实现, 在 GO 语言中的 <code>Linux</code> 下创建进程使用的系统调用是 <code>clone</code>. 子进程几近于父进程的翻版, 子进程获得父进程的栈、数据段、堆和执行文本段的拷贝. 可以视为把父进程一分为二</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;flag&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;os/exec&quot;</span></span><br><span class="line">	<span class="string">&quot;syscall&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Handler <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(handler *Handler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Request start at&quot;</span>, time.Now(), r.URL.Path+<span class="string">&quot;?&quot;</span>+r.URL.RawQuery, <span class="string">&quot;request done at&quot;</span>, time.Now(), <span class="string">&quot; pid:&quot;</span>, os.Getpid())</span><br><span class="line">	time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">	_, err := w.Write([]<span class="keyword">byte</span>(<span class="string">&quot;this is current request response&quot;</span>))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Current request failure:&quot;</span>, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Request done at&quot;</span>, time.Now(), <span class="string">&quot; pid:&quot;</span>, os.Getpid())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		err      error</span><br><span class="line">		listener net.Listener</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Pass the parameter on the command line to decide whether to fork a child process</span></span><br><span class="line">		<span class="comment">// If there is no parameter control, the child process will fork another process,</span></span><br><span class="line">		<span class="comment">// and the fork process will fork a child process.</span></span><br><span class="line">		<span class="comment">// This has been the fork child process, obviously this is not what we need</span></span><br><span class="line">		fork = flag.Bool(<span class="string">&quot;f&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;Parameter determines whether to fork a child process&quot;</span>)</span><br><span class="line">	)</span><br><span class="line">	flag.Parse()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> *fork &#123;</span><br><span class="line">		listener, err = net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:10005&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="built_in">panic</span>(<span class="string">&quot;Listen port 10005 failure: &quot;</span> + err.Error())</span><br><span class="line">		&#125;</span><br><span class="line">		tcp, _ := listener.(*net.TCPListener)</span><br><span class="line">		fd, _ := tcp.File()</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Current process fd: %v, filename: %v, %#v\n&quot;</span>, fd.Fd(), fd.Name(), listener)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		f := os.NewFile(<span class="number">3</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">		listener, err = net.FileListener(f)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;Listen file %s failure fd: %v error: %s\n&quot;</span>, f.Name(), f.Fd(), err.Error()))</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Child process fd: %v, filemame: %v, %#v\n&quot;</span>, f.Fd(), f.Name(), listener)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	server := http.Server&#123;Handler: &amp;Handler&#123;&#125;, ReadTimeout: <span class="number">6</span> * time.Second&#125;</span><br><span class="line">	log.Println(<span class="string">&quot;Actual pid is &quot;</span>, syscall.Getpid())</span><br><span class="line">	log.Printf(<span class="string">&quot;Listener: %v \n&quot;</span>, listener)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> *fork &#123;</span><br><span class="line">		<span class="comment">// To make it easier to check the status of the process, fork child process after 10 seconds</span></span><br><span class="line">		timer := time.NewTimer(<span class="number">10</span> * time.Second)</span><br><span class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">			&lt;- timer.C</span><br><span class="line">			tl, _ := listener.(*net.TCPListener)</span><br><span class="line">			currentFd, err := tl.File()</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(<span class="string">&quot;acquiring listener file failed&quot;</span>)</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// Here, you need to remove the parent process&#x27;s -f parameter to prevent the child process</span></span><br><span class="line">			<span class="comment">// from creating the child process.</span></span><br><span class="line">			cmd := exec.Command(os.Args[<span class="number">0</span>])</span><br><span class="line">			cmd.ExtraFiles, cmd.Stdout, cmd.Stderr = []*os.File&#123;currentFd&#125;, os.Stdout, os.Stderr</span><br><span class="line">			err = cmd.Start()</span><br><span class="line">			<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;cmd.Start fail:%s&quot;</span>, err))</span><br><span class="line">			&#125;</span><br><span class="line">			fmt.Println(<span class="string">&quot;forked new pid: &quot;</span>, cmd.Process.Pid)</span><br><span class="line">		&#125;()</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	err = server.Serve(listener)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过 <code>go build main.go</code> 编译后获得一个 <code>mian</code> 命令, 我们先来看一下在没有 <code>fork</code> <strong>子进程</strong> 之前的请求状态(加上 <code>-f</code> 参数):</p>
<p><img src="/images/go-hot-reload-first-process.png" alt="image"></p>
<p>服务启动后我通过 <code>curl http://127.0.0.1:10005</code> 发送了几个请求, 请求正常输出. 10秒之后 <strong>子进程</strong> 被 <code>fork</code> 出来之后 (PS:父进程还没有被杀掉) 我又发送了几个请求如下:</p>
<p><img src="/images/go-hot-reload-child-process.png" alt="image"></p>
<p>通过上面的图片我们可以看出, 两个进程都是在运行的且监听的是同一个端口, 两个进程都在请求. 通过 <code>ps -ef</code> 命令查看它们的进程状态如下:</p>
<p><img src="/images/go-hot-reload-process-status.png" alt="image"></p>
<p>在父进程还没有被杀死的时候, 子进程的 <code>PPID</code> 为父进程ID, 正常! 接下来 我们通过命令 <code>kill 4555</code> 杀死父进程, 查看子进程状态:</p>
<p><img src="/images/go-hot-reload-child-process-status.png" alt="image"></p>
<p>当父进程 4555 被杀死后, 子进程的 <code>PPID</code> 变成了 1. 跟我们上述的理论没有差别, 我们在通过 <code>curl</code> 尝试请求端口 10005 看是否存在差异:</p>
<p><img src="/images/go-hot-reload-child-process-request.png" alt="image"></p>
<blockquote>
<p>os.NewFile(3, “”) 解析: os.NewFile 接收两个值, 一个为文件描述符(FD), 一个是文件名, 该函数并不是创建一个新的文件, 而是新建一个文件但是不保存返回文件指针.</p>
</blockquote>
<blockquote>
<p>在 Linux 系统中一切都可以看成是文件, 文件可分为: 普通文件、目录文件、链接文件和设备文件. 文件描述符 (file descriptor) 是内核为了高效管理已打开文件所创建的索引, 为一个 <strong>非负整数</strong> (通常是一个小整数), 用于指代被打开的文件, 所有执行 <code>I/O</code> 操作的系统调用都需要用到文件描述符. 程序刚启动时: 0 为标准输入(stdio)、1 为标准输出(stdout)、2 是标准错误(stderr). 如果此时需要打开一个新文件, 那么它的描述符就是 3 (这里的打开包括创建). <strong><code>POSIX</code>标准要求每次打开文件时（含socket）必须使用当前进程中最小可用的文件描述符号码，因此，在网络通信过程中稍不注意就有可能造成串话</strong></p>
</blockquote>
<h4 id="实现热启动"><a href="#实现热启动" class="headerlink" title="实现热启动"></a>实现热启动</h4><p>通过上面的示例我们发现当父进程被杀死后, 子进程会被 <code>Init</code> 进程收养称为新的主进程, 那么我们就通过这种逻辑完成对新老服务的交替, 在子进程启动后且父进程处理完旧请求后安全退出父进程 (PS: 上述示例中, 在子进程启动后并没有关闭父进程的请求接收, 所有父进程和子进程都在处理请求, 在热启动中我们会关闭父进程请求接收).</p>
<h5 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h5><p>修改代码如下:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;context&quot;</span></span><br><span class="line">	<span class="string">&quot;flag&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;log&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;net/http&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">	<span class="string">&quot;os/exec&quot;</span></span><br><span class="line">	<span class="string">&quot;os/signal&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;syscall&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Handler <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(handler *Handler)</span> <span class="title">ServeHTTP</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Request start at&quot;</span>, time.Now(), r.URL.Path+<span class="string">&quot;?&quot;</span>+r.URL.RawQuery, <span class="string">&quot;request done at&quot;</span>, time.Now(), <span class="string">&quot; pid:&quot;</span>, os.Getpid())</span><br><span class="line">	time.Sleep(<span class="number">5</span> * time.Second)</span><br><span class="line">	_, err := w.Write([]<span class="keyword">byte</span>(<span class="string">&quot;this is current request response&quot;</span>))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		fmt.Println(<span class="string">&quot;Current request failure:&quot;</span>, err.Error())</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Println(<span class="string">&quot;Request done at&quot;</span>, time.Now(), <span class="string">&quot; pid:&quot;</span>, os.Getpid())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">var</span> (</span><br><span class="line">		err      error</span><br><span class="line">		listener net.Listener</span><br><span class="line">		<span class="comment">// You need a wait group to wait for the current process (parent process) http service to shut down gracefully,</span></span><br><span class="line">		<span class="comment">// otherwise, after calling server.Shutdown, the main thread will stop blocking the entire process exit,</span></span><br><span class="line">		<span class="comment">// and the old requests that are not completed will be discarded</span></span><br><span class="line">		<span class="comment">// And this wait group must be a pointer (the data exists on the heap),</span></span><br><span class="line">		<span class="comment">// because we said before: The child process is the stack area of the shared parent process,</span></span><br><span class="line">		<span class="comment">// when the wait group exists on the stack, it will cause two processes to call a same one wait group</span></span><br><span class="line">		group    = <span class="built_in">new</span>(sync.WaitGroup)</span><br><span class="line">		graceful = flag.Bool(<span class="string">&quot;g&quot;</span>, <span class="literal">false</span>, <span class="string">&quot;When the service is started for the first time, &quot;</span>+</span><br><span class="line">			<span class="string">&quot;there is no need to perform hot restart related operations&quot;</span>)</span><br><span class="line">	)</span><br><span class="line">	flag.Parse()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> *graceful &#123;</span><br><span class="line">		f := os.NewFile(<span class="number">3</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">		listener, err = net.FileListener(f)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;Listen file %s failure fd: %v error: %s\n&quot;</span>, f.Name(), f.Fd(), err.Error()))</span><br><span class="line">		&#125;</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Child process fd: %v, filemame: %v, %#v\n&quot;</span>, f.Fd(), f.Name(), listener)</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		listener, err = net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:10005&quot;</span>)</span><br><span class="line">		<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="built_in">panic</span>(<span class="string">&quot;Listen port 10005 failure: &quot;</span> + err.Error())</span><br><span class="line">		&#125;</span><br><span class="line">		tcp, _ := listener.(*net.TCPListener)</span><br><span class="line">		fd, _ := tcp.File()</span><br><span class="line">		fmt.Printf(<span class="string">&quot;Current process fd: %v, filename: %v, %#v\n&quot;</span>, fd.Fd(), fd.Name(), listener)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	server := http.Server&#123;Handler: &amp;Handler&#123;&#125;, ReadTimeout: <span class="number">6</span> * time.Second&#125;</span><br><span class="line">	log.Println(<span class="string">&quot;Actual pid is &quot;</span>, syscall.Getpid())</span><br><span class="line">	log.Printf(<span class="string">&quot;Listener: %v \n&quot;</span>, listener)</span><br><span class="line"></span><br><span class="line">	group.Add(<span class="number">1</span>)</span><br><span class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(group *sync.WaitGroup)</span></span> &#123;</span><br><span class="line">		<span class="keyword">defer</span> group.Done()</span><br><span class="line">		signalChan := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">		signal.Notify(signalChan, syscall.SIGHUP, syscall.SIGTERM)</span><br><span class="line"></span><br><span class="line">	ListenSignal:</span><br><span class="line">		<span class="keyword">for</span> &#123;</span><br><span class="line">			sig := &lt;-signalChan</span><br><span class="line">			<span class="comment">// Give the http service that needs to be gracefully shut down a timeout to</span></span><br><span class="line">			<span class="comment">// prevent the parent process from persisting</span></span><br><span class="line">			ctx, _ := context.WithTimeout(context.Background(), <span class="number">20</span>*time.Second)</span><br><span class="line">			<span class="keyword">switch</span> sig &#123;</span><br><span class="line">			<span class="keyword">case</span> syscall.SIGTERM, syscall.SIGHUP:</span><br><span class="line">				tl, _ := listener.(*net.TCPListener)</span><br><span class="line">				currentFd, err := tl.File()</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					<span class="built_in">panic</span>(<span class="string">&quot;acquiring listener file failed&quot;</span>)</span><br><span class="line">				&#125;</span><br><span class="line">				cmd := exec.Command(os.Args[<span class="number">0</span>], <span class="string">&quot;-g&quot;</span>)</span><br><span class="line">				cmd.ExtraFiles, cmd.Stdout, cmd.Stderr = []*os.File&#123;currentFd&#125;, os.Stdout, os.Stderr</span><br><span class="line">				err = cmd.Start()</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;cmd.Start fail:%s&quot;</span>, err))</span><br><span class="line">				&#125;</span><br><span class="line">				fmt.Println(<span class="string">&quot;forked new pid: &quot;</span>, cmd.Process.Pid)</span><br><span class="line"></span><br><span class="line">				<span class="comment">// When the child process fork is complete, close the http service of the parent process,</span></span><br><span class="line">				<span class="comment">// so the parent process will not receive new requests.</span></span><br><span class="line">				err = server.Shutdown(ctx)</span><br><span class="line">				<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">					fmt.Println(<span class="string">&quot;shutdown fail: &quot;</span>, err)</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">				<span class="comment">// After closing the parent process http service,</span></span><br><span class="line">				<span class="comment">// you need to jump out of the loop and stop monitoring the signal,</span></span><br><span class="line">				<span class="comment">// otherwise the parent process will still exist</span></span><br><span class="line">				<span class="keyword">break</span> ListenSignal</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;(group)</span><br><span class="line"></span><br><span class="line">	err = server.Serve(listener)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		log.Println(err)</span><br><span class="line">	&#125;</span><br><span class="line">	fmt.Printf(<span class="string">&quot;Pid %d http server closed\n&quot;</span>, os.Getpid())</span><br><span class="line"></span><br><span class="line">	<span class="comment">// After calling server.Shutdown, server.Serve will stop blocking the main thread, </span></span><br><span class="line">	<span class="comment">// so here we need to wait for the old request to be processed or timed out</span></span><br><span class="line">	group.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><p>我通过 <code>ab</code> 测试, 发送了 100 个测试请求, 并在中间关闭了父进程, 结果如下:</p>
<p><img src="/images/go-hot-reload-restart-result.png" alt="images"></p>
<p><img src="/images/go-hot-reload-ab-result.png" alt="images"></p>
<p>测试结果 OK, 没有请求失败的情况.</p>
<h4 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h4><p><a href="https://www.cnblogs.com/sunsky303/p/9778466.html">Golang服务器热重启、热升级、热更新详解(有BUG, 主线程会一直监听信号, 不会退出)</a><br><a href="https://blog.csdn.net/gatieme/article/details/51532804">Linux下1号进程的前世(kernel_init)今生(init进程)—-Linux进程的管理与调度</a></p>
]]></content>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>搭建 Jira + Confluence 用于公司项目流程管理</title>
    <url>/posts/jira-confluence-process-manage.html</url>
    <content><![CDATA[<p>这套工具, 是在某一次观摩朋友公司大型发版过程中, 学到的, 发现使用起来挺方便, 正好我们公司的流程管理工具不是很方便, 就借鉴了一下. 记录一下搭建过程和遇到的一些坑</p>
<blockquote>
<p>好的流程管理工具, 可以提高每个部门之间协作的效率, 让大家更便捷、更高效</p>
</blockquote>
<p><img src="/images/porcess-desc-page.png" alt="image"></p>
<span id="more"></span>

<h4 id="构建-Jria-和-Confluence-镜像并修改相关配置"><a href="#构建-Jria-和-Confluence-镜像并修改相关配置" class="headerlink" title="构建 Jria 和 Confluence 镜像并修改相关配置"></a>构建 <code>Jria</code> 和 <code>Confluence</code> 镜像并修改相关配置</h4><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Confluence Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> cptactionhank/atlassian-confluence:<span class="number">7.9</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将代理破解包加入容器</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> <span class="string">&quot;atlassian-agent.jar&quot;</span> /opt/atlassian/confluence/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置启动加载代理包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;export CATALINA_OPTS=&quot;-javaagent:/opt/atlassian/confluence/atlassian-agent.jar $&#123;CATALINA_OPTS&#125;&quot;&#x27;</span> &gt;&gt; /opt/atlassian/confluence/bin/setenv.sh</span></span><br></pre></td></tr></table></figure>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Jira Dockerfile</span></span><br><span class="line"><span class="keyword">FROM</span> cptactionhank/atlassian-jira-software:<span class="number">8.1</span>.<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">USER</span> root</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将代理破解包加入容器</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> <span class="string">&quot;atlassian-agent.jar&quot;</span> /opt/atlassian/jira/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置启动加载代理包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;export CATALINA_OPTS=&quot;-javaagent:/opt/atlassian/jira/atlassian-agent.jar $&#123;CATALINA_OPTS&#125;&quot;&#x27;</span> &gt;&gt; /opt/atlassian/jira/bin/setenv.sh</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">version: &quot;3.7&quot;</span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  atlassian-mysql:</span><br><span class="line">    image: mysql:5.7</span><br><span class="line">    container_name: atlassian-mysql</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    networks:</span><br><span class="line">      atlassian-net:</span><br><span class="line">        aliases:</span><br><span class="line">          - mysql</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=123456</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/mysql-data/mysql:/var/lib/mysql</span><br><span class="line">      - ./data/mysql-data/mysql.conf.d:/etc/mysql/mysql.conf.d</span><br><span class="line"></span><br><span class="line">  jira:</span><br><span class="line">    image: base/jira:8.1.0</span><br><span class="line">    container_name: jira</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;4000:8080&quot;</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    depends_on:</span><br><span class="line">      - atlassian-mysql</span><br><span class="line">    networks:</span><br><span class="line">      atlassian-net:</span><br><span class="line">        aliases:</span><br><span class="line">          - jira</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/jira-data/jira:/var/atlassian/jira</span><br><span class="line">      - ./data/jira-conf/jira:/opt/atlassian/jira</span><br><span class="line"></span><br><span class="line">  confluence:</span><br><span class="line">    image: base/confluence:7.9.0</span><br><span class="line">    container_name: confluence</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;5000:8090&quot;</span><br><span class="line">    restart: unless-stopped</span><br><span class="line">    depends_on:</span><br><span class="line">      - atlassian-mysql</span><br><span class="line">    networks:</span><br><span class="line">      atlassian-net:</span><br><span class="line">        aliases:</span><br><span class="line">          - confluence</span><br><span class="line">    volumes:</span><br><span class="line">      - ./data/confluence-data/confluence:/var/atlassian/confluence</span><br><span class="line">      - ./data/confluence-conf/confluence:/opt/atlassian/confluence</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  atlassian-net:</span><br><span class="line">    driver: bridge</span><br></pre></td></tr></table></figure>

<h5 id="设置-Mysql-权限"><a href="#设置-Mysql-权限" class="headerlink" title="设置 Mysql 权限"></a>设置 <code>Mysql</code> 权限</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> jira identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;jira&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;jira&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> confluence identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;confluence&#x27;</span>@<span class="string">&#x27;%&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> privileges <span class="keyword">on</span> <span class="operator">*</span>.<span class="operator">*</span> <span class="keyword">to</span> <span class="string">&#x27;confluence&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span> <span class="keyword">with</span> <span class="keyword">grant</span> option;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<h5 id="设置-Mysql-字符集"><a href="#设置-Mysql-字符集" class="headerlink" title="设置 Mysql 字符集"></a>设置 <code>Mysql</code> 字符集</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;tx%&#x27;</span>;</span><br><span class="line"><span class="keyword">set</span> session transaction isolation level read committed;</span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;tx%&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> tx_isolation<span class="operator">=</span><span class="string">&#x27;READ-COMMITTED&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h5 id="修改-Jira-和-Confluence-配置-根据自己机器配置合理配置"><a href="#修改-Jira-和-Confluence-配置-根据自己机器配置合理配置" class="headerlink" title="修改 Jira 和 Confluence 配置 (根据自己机器配置合理配置)"></a>修改 <code>Jira</code> 和 <code>Confluence</code> 配置 (根据自己机器配置合理配置)</h5><p>由于 <code>Jira</code> 和 <code>Confluence</code> 默认配置内存都很小, 会导致机器资源利用不充分从而服务卡顿</p>
<p>编辑 <code>/opt/atlassian/jira/bin/setenv.sh</code> 添加或修改以下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">JVM_MINIMUM_MEMORY=<span class="string">&quot;2048m&quot;</span></span><br><span class="line">JVM_MAXIMUM_MEMORY=<span class="string">&quot;4096m&quot;</span></span><br></pre></td></tr></table></figure>

<p>编辑 <code>/opt/atlassian/confluence/bin/setenv.sh</code> 添加或修改一下内容</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CATALINA_OPTS=<span class="string">&quot;-Xms2048m -Xmx4096m -XX:+UseG1GC <span class="variable">$&#123;CATALINA_OPTS&#125;</span>&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="Jira-和-Confluence-用户打通"><a href="#Jira-和-Confluence-用户打通" class="headerlink" title="Jira 和 Confluence 用户打通"></a><code>Jira</code> 和 <code>Confluence</code> 用户打通</h4><p>查看 <code>atlassian</code> 网关 <code>IP</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker network ls</span><br><span class="line"></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">454213449f23        atlassian-net       bridge              <span class="built_in">local</span></span><br><span class="line">6c01b316db09        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">84b0dece1eb4        host                host                <span class="built_in">local</span></span><br><span class="line">882cc15cbde0        none                null                <span class="built_in">local</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect atlassian_default</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;atlassian_default&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;454213449f233d64c1fe1c2ab9041d6d9b4c22fa8f08a3b9641201da81bc7a4d&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2020-07-04T14:48:41.020085766Z&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;192.168.32.0/20&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;192.168.32.1&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">        ....</span><br></pre></td></tr></table></figure>

<h5 id="创建-Jira-用户服务器"><a href="#创建-Jira-用户服务器" class="headerlink" title="创建 Jira 用户服务器"></a>创建 <code>Jira</code> 用户服务器</h5><p><img src="/images/create-jira-user-server.png" alt="image"></p>
<h5 id="Confluence-配置-Jria-用户应用服务器"><a href="#Confluence-配置-Jria-用户应用服务器" class="headerlink" title="Confluence 配置 Jria 用户应用服务器"></a><code>Confluence</code> 配置 <code>Jria</code> 用户应用服务器</h5><p><img src="/images/configure-jira-user-app-server.png" alt="image"></p>
<h5 id="测试同步用户并调整优先级"><a href="#测试同步用户并调整优先级" class="headerlink" title="测试同步用户并调整优先级"></a>测试同步用户并调整优先级</h5><ul>
<li>当创建用户之后, 只有用户登录了, 才会同步到 <code>Confluence</code> 服务器</li>
<li>但是你创建的组, 必须要手动同步</li>
<li>更新用户权限后, 必须要手动同步</li>
</ul>
<p><img src="/images/test-sync-user-adjust-priorities.png" alt="image"></p>
<h4 id="问题合集"><a href="#问题合集" class="headerlink" title="问题合集"></a>问题合集</h4><p>连接测试失败, 来自服务器的响应 <code>com.atlassian.crowd.exception.ApplicationPermissionException: Forbidden</code></p>
<blockquote>
<p>连接测试失败。来自服务器的响应: com.atlassian.crowd.exception.ApplicationPermissionException: Forbidden (403) 加载页面时发生 “403 - Forbidden” 错误 client.forbidden.exception 转换到 Jira 主页</p>
</blockquote>
<p><a href="https://confluence.atlassian.com/confkb/unable-to-connect-to-jira-for-authentication-forbidden-403-728139630.html">Unable to connect to JIRA for authentication - Forbidden 403</a> 的 Resolution 就是答案</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="https://www.jianshu.com/p/4e4112237cb5">搭建 Jira + Confluence</a></li>
<li><a href="https://blog.csdn.net/TripleS_X/article/details/79280230">图解利用 Jira 对 Scrum 项目进行跟踪管理 (一)</a></li>
<li><a href="https://blog.csdn.net/TripleS_X/article/details/79289464">图解利用 Jira 对 Scrum 项目进行跟踪管理 (二)</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>Hexo 搭配 Github pages 搭建个人博客</title>
    <url>/posts/hexo-install.html</url>
    <content><![CDATA[<p>作为一个 IT 行业的菜鸟，有的时候在网上浏览到一些好的技术文章，看过之后转头就忘记了，所以有一个自己的技术博客做一些记录是非常有必要的。但是个人博客虽然简单但是开发起来费时费力，而且如果要添加什么功能也非常的麻烦；SO 选一个开源的博客工具是一个非常好的办法。这里就记录一下使用 <code>Hexo</code> 和 <code>Github pages</code> 搭建个人博客的步骤、插件的集成和碰到的问题</p>
<p>那么为什么要使用 <code>Github pages</code> 来搭建个人博客呢？</p>
<ul>
<li>支持绑定自己的域名</li>
<li>提交网站等同于上传自己的代码</li>
<li>提供免费的空间，而且就在自己的仓库里 (PS: 在服务器上维护自己的 Blog 真的很麻烦!!)</li>
</ul>
<span id="more"></span>

<h4 id="安装-node-和-npm"><a href="#安装-node-和-npm" class="headerlink" title="安装 node 和 npm"></a>安装 <code>node</code> 和 <code>npm</code></h4><p><code>Hexo</code> 是使用 <code>nodejs</code> 开发的，所有如果要使用 <code>Hexo</code> 的话首先要安装 <code>nodejs</code> 和 <code>npm</code> (PS: git 也是必须要的，但是这个我就不记录了，不然太 low! 哈哈哈哈哈)，至少安装 6.9 版本以上的 <code>node</code>。下面记录一些 Mac 系统使用 <a href="https://brew.sh/">Homebrew</a> 安装 <code>node</code> 和 <code>npm</code> 的过程；如果是 <code>windows</code> 用户的话可以参照 <a href="https://www.liaoxuefeng.com/">廖雪峰的博客</a> 中的 <a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023025597810528">安装Node.js和npm</a></p>
<h5 id="Homebrew-安装"><a href="#Homebrew-安装" class="headerlink" title="Homebrew 安装"></a><code>Homebrew</code> 安装</h5><ul>
<li>安装</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install node &amp;&amp; brew install npm</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看结果</li>
</ul>
<p><img src="/images/node-npm-version.png" alt="image"></p>
<h4 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 <code>Hexo</code></h4><ul>
<li>安装 <code>hexo-cli</code> 命令行工具: <code>npm install hexo-cli -g</code></li>
<li>创建工作目录并初始化 <code>hexo</code>: <code>mkdir hexo &amp;&amp; cd hexo &amp;&amp; hexo init</code></li>
<li>运行 <code>npm</code>: <code>npm install</code></li>
</ul>
<p>经过上面步骤基本上博客的基本框架就已经搭建好了，这个时候我们可以先在本地运行一下看一下效果；运行 <code>hexo g &amp;&amp; hexo s</code> (PS: 关于 <code>Hexo</code> 的命令可以查看 <a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>)</p>
<p><img src="/images/hexo-index.png" alt="image"></p>
<h5 id="修改站点配置文档"><a href="#修改站点配置文档" class="headerlink" title="修改站点配置文档"></a>修改站点配置文档</h5><h6 id="网站基础配置，修改站点配置文件-config-yml"><a href="#网站基础配置，修改站点配置文件-config-yml" class="headerlink" title="网站基础配置，修改站点配置文件 _config.yml"></a>网站基础配置，修改站点配置文件 <code>_config.yml</code></h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span> <span class="string">+</span> <span class="string">Github</span> <span class="string">page</span> <span class="string">搭建个人博客示例</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">Hexo</span> <span class="string">+</span> <span class="string">Github</span> <span class="string">page</span> <span class="string">搭建个人博客示例副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">网站</span> <span class="string">description</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">网站</span> <span class="string">keywords</span> <span class="string">多个关键词英文逗号分隔</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">Reliy</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>

<h6 id="Git-仓库配置"><a href="#Git-仓库配置" class="headerlink" title="Git 仓库配置"></a>Git 仓库配置</h6><p>使用 <code>git</code> 作为提交方式需要先安装插件 <code>npm install hexo-deployer-git –save</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">	<span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">	<span class="attr">repo:</span> <span class="string">git@github.com:xxx/xxx.github.io.git</span> <span class="comment"># 对应的 git 仓库地址</span></span><br><span class="line">	<span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<h4 id="安装-Next-主题"><a href="#安装-Next-主题" class="headerlink" title="安装 Next 主题"></a>安装 <code>Next</code> 主题</h4><p><code>Hexo</code> 在我看来最大的特点 (PS: 也是我选择它的原因) 就是可以根据自己的喜好来选择主题和集成插件。在 <code>Github</code> 上有很多别人写好的主题可以拿来用；包括官方也提供了不少主题可以选择: <a href="https://hexo.io/themes/">Hexo官方主题</a>；当然如果有那个能力的话自己写一套主题也是不错的选择。经过比较之后我选择使用 <code>Next</code> 主题，因为该主题集成了不少插件基本上可能需要使用到的都会有；而且主题样式也不错。这里我只写基本步骤，具体的 <code>Next</code> 主题配置可以查看 <a href="https://theme-next.iissnan.com/getting-started.html">Next官方文档</a></p>
<h5 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span></span><br></pre></td></tr></table></figure>

<h6 id="修改站点配置文件-config-yml-中内容"><a href="#修改站点配置文件-config-yml-中内容" class="headerlink" title="修改站点配置文件 _config.yml 中内容"></a>修改站点配置文件 <code>_config.yml</code> 中内容</h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment"># Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure>

<h6 id="修改-Next-主题的页面风格-编辑主题配置文件-themes-next-config-yml-Next-提供了-4-中页面风格可以使用，可以根据自己的喜好选择"><a href="#修改-Next-主题的页面风格-编辑主题配置文件-themes-next-config-yml-Next-提供了-4-中页面风格可以使用，可以根据自己的喜好选择" class="headerlink" title="修改 Next 主题的页面风格, 编辑主题配置文件 themes/next/_config.yml, Next 提供了 4 中页面风格可以使用，可以根据自己的喜好选择"></a>修改 <code>Next</code> 主题的页面风格, 编辑主题配置文件 <code>themes/next/_config.yml</code>, <code>Next</code> 提供了 4 中页面风格可以使用，可以根据自己的喜好选择</h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure>

<h4 id="开启本地搜索插件"><a href="#开启本地搜索插件" class="headerlink" title="开启本地搜索插件"></a>开启本地搜索插件</h4><h6 id="安装-hexo-generator-searchdb，在站点的根目录下执行以下命令："><a href="#安装-hexo-generator-searchdb，在站点的根目录下执行以下命令：" class="headerlink" title="安装 hexo-generator-searchdb，在站点的根目录下执行以下命令："></a>安装 <code>hexo-generator-searchdb</code>，在站点的根目录下执行以下命令：</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-searchdb --save</span></span><br></pre></td></tr></table></figure>

<h6 id="编辑站点配置文件-config-yml-添加以下内容到任意位置"><a href="#编辑站点配置文件-config-yml-添加以下内容到任意位置" class="headerlink" title="编辑站点配置文件 _config.yml, 添加以下内容到任意位置"></a>编辑站点配置文件 <code>_config.yml</code>, 添加以下内容到任意位置</h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search plug-in configuration</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<h6 id="修改主题文件-themes-next-config-yml"><a href="#修改主题文件-themes-next-config-yml" class="headerlink" title="修改主题文件 themes/next/_config.yml"></a>修改主题文件 <code>themes/next/_config.yml</code></h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h5 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h5><p><img src="/images/hexo-local-search-test.png" alt="image"></p>
<h4 id="给博客添加-Gitalk-评论插件"><a href="#给博客添加-Gitalk-评论插件" class="headerlink" title="给博客添加 Gitalk 评论插件"></a>给博客添加 <code>Gitalk</code> 评论插件</h4><p><code>Next</code> 主题原生支持几种评论插件，其中包括 <code>disqus</code> 和 <code>gitment</code> (PS: 个人觉得这两个比较好用)；但是 <code>disqus</code> 对国内的网络支持非常的不好 (PS: 国内嘛很正常)，所以我原本选择的是 <code>gitment</code>，集成好 <code>gitment</code> 之后发现用不了；包括现在集成了 <code>gitment</code> 的博客好像都出了问题。在解决的过程中发现了 <code>Gitalk</code>，基本和 <code>gitment</code> 一样</p>
<h5 id="申请-Github-application"><a href="#申请-Github-application" class="headerlink" title="申请 Github application"></a>申请 <code>Github application</code></h5><p><code>Gitalk</code> 是一个利用 <code>Github Api</code>, 基于 <code>Github issue</code> 和 <code>Preact</code> 开发的评论插件；由于需要调用 <code>Github Api</code> 需要先申请一个 <code>Github Appliction</code> 用于认证登录。 <a href="https://github.com/settings/applications/new">申请链接</a></p>
<p><img src="/images/github-application-register.png" alt="image"></p>
<p>点击注册之后，跳转到如下页面；其中的 <code>Client ID</code> 和 <code>Client Secret</code> 是需要使用到的。</p>
<p><img src="/images/github-application-register-success.png" alt="image"></p>
<h5 id="在-Next-中集成-Gitalk"><a href="#在-Next-中集成-Gitalk" class="headerlink" title="在 Next 中集成 Gitalk"></a>在 <code>Next</code> 中集成 <code>Gitalk</code></h5><p>因为 <code>Next</code> 主题并不是原生支持 <code>Gitalk</code> 的，所以需要自己手动的集成到主题中。</p>
<h6 id="新建-themes-next-layout-third-party-comments-gitalk-swig-文件，并添加内"><a href="#新建-themes-next-layout-third-party-comments-gitalk-swig-文件，并添加内" class="headerlink" title="新建 themes/next/layout/_third-party/comments/gitalk.swig 文件，并添加内"></a>新建 <code>themes/next/layout/_third-party/comments/gitalk.swig</code> 文件，并添加内</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> page.comments &amp;&amp; theme.gitalk.enable %&#125;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;</span>&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">   <span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="handlebars"><span class="xml"></span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        var gitalk = new Gitalk(&#123;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">          clientID: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.ClientID</span> &#125;&#125;</span><span class="xml">&#x27;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">          clientSecret: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.ClientSecret</span> &#125;&#125;</span><span class="xml">&#x27;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">          repo: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.repo</span> &#125;&#125;</span><span class="xml">&#x27;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">          owner: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.githubID</span> &#125;&#125;</span><span class="xml">&#x27;,</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">          admin: [&#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.adminUser</span> &#125;&#125;</span><span class="xml">&#x27;],</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">          id: md5(window.location.pathname),</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">          distractionFreeMode: &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">theme.gitalk.distractionFreeMode</span> &#125;&#125;</span><span class="xml">&#x27;</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        &#125;)</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">        gitalk.render(&#x27;gitalk-container&#x27;)</span></span></span></span><br><span class="line"><span class="xml"><span class="handlebars"><span class="xml">       </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<h6 id="修改-themes-next-layout-partials-comments-swig，添加内容如下，与前面的-elseif-同一级别上"><a href="#修改-themes-next-layout-partials-comments-swig，添加内容如下，与前面的-elseif-同一级别上" class="headerlink" title="修改 themes/next/layout/_partials/comments.swig，添加内容如下，与前面的 elseif 同一级别上"></a>修改 <code>themes/next/layout/_partials/comments.swig</code>，添加内容如下，与前面的 <code>elseif</code> 同一级别上</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.gitalk.enable %&#125;</span><br><span class="line"> &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;comments&quot;</span> id=<span class="string">&quot;comments&quot;</span>&gt;</span><br><span class="line">     <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;gitalk-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h6 id="修改-themes-next-layout-third-party-comments-index-swig，在最后一行添加内容："><a href="#修改-themes-next-layout-third-party-comments-index-swig，在最后一行添加内容：" class="headerlink" title="修改 themes/next/layout/_third-party/comments/index.swig，在最后一行添加内容："></a>修改 <code>themes/next/layout/_third-party/comments/index.swig</code>，在最后一行添加内容：</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;% include <span class="string">&#x27;gitalk.swig&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure>

<h6 id="新建-themes-next-source-css-common-components-third-party-gitalk-styl-文件，添加内容："><a href="#新建-themes-next-source-css-common-components-third-party-gitalk-styl-文件，添加内容：" class="headerlink" title="新建 themes/next/source/css/_common/components/third-party/gitalk.styl 文件，添加内容："></a>新建 <code>themes/next/source/css/_common/components/third-party/gitalk.styl</code> 文件，添加内容：</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gt-header</span> <span class="selector-tag">a</span>, <span class="selector-class">.gt-comments</span> <span class="selector-tag">a</span>, <span class="selector-class">.gt-popup</span> <span class="selector-tag">a</span></span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line"><span class="selector-class">.gt-container</span> <span class="selector-class">.gt-popup</span> <span class="selector-class">.gt-action</span><span class="selector-class">.is--active</span>:before</span><br><span class="line">  top: <span class="number">0.7em</span>;</span><br></pre></td></tr></table></figure>

<h6 id="修改-themes-next-source-css-common-components-third-party-third-party-styl，在最后一行上添加内容，引入样式："><a href="#修改-themes-next-source-css-common-components-third-party-third-party-styl，在最后一行上添加内容，引入样式：" class="headerlink" title="修改 themes/next/source/css/_common/components/third-party/third-party.styl，在最后一行上添加内容，引入样式："></a>修改 <code>themes/next/source/css/_common/components/third-party/third-party.styl</code>，在最后一行上添加内容，引入样式：</h6><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;gitalk&quot;</span>;</span><br></pre></td></tr></table></figure>

<h6 id="在主题配置文件-themes-next-config-yml-中添加如下内容："><a href="#在主题配置文件-themes-next-config-yml-中添加如下内容：" class="headerlink" title="在主题配置文件 themes/next/_config.yml 中添加如下内容："></a>在主题配置文件 <code>themes/next/_config.yml</code> 中添加如下内容：</h6><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">	<span class="attr">enable:</span> <span class="literal">true</span>	<span class="comment"># 开启 Gitalk 插件</span></span><br><span class="line">	<span class="attr">githubID:</span> <span class="string">xxxx</span> <span class="comment"># 存放 Gitalk 评论内容仓库的 Github 账号</span></span><br><span class="line">	<span class="attr">repo:</span> <span class="string">xxxx.github.io</span> <span class="comment"># 存放 Gitalk 评论内容仓库</span></span><br><span class="line">	<span class="attr">ClientID:</span> <span class="string">xxxxx</span> <span class="comment"># Github Application Client Id</span></span><br><span class="line">	<span class="attr">ClientSecret:</span> <span class="string">xxxx</span> <span class="comment"># Github Application Client Secret</span></span><br><span class="line">	<span class="attr">adminUser:</span> <span class="string">xxxx</span> <span class="comment"># 管理人员 Github 用户名</span></span><br><span class="line">	<span class="attr">distractionFreeMode:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure>

<h6 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h6><p><img src="/images/hexo-gitalk-test.png" alt="image"></p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="https://theme-next.iissnan.com/third-party-services.html#local-search">Hexo Next 主题集成本地搜索插件</a></li>
<li><a href="https://asdfv1929.github.io/2018/01/20/gitalk/">Hexo NexT主题中集成gitalk评论系统</a></li>
<li><a href="https://thief.one/2017/03/03/Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/">Hexo搭建博客教程</a></li>
</ul>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel(Lumen) 5.X 修改时间字段为 INT 类型</title>
    <url>/posts/laravel-changes-model-date-format.html</url>
    <content><![CDATA[<p>Our predecessors have already encountered problems we may encounter, so it is very important to learn efficient Google</p>
<p><code>Laravel</code> 和 <code>Lumen</code> 框架会自动维护模型 (对应数据库表) 的 <code>created_at</code>、<code>updated_at</code> 和 <code>deleted_at</code> 字段，三个字段非常好用且被框架原生支持，如果要自己实现的话非常的麻烦。但是三个字段在数据库中默认都是 <code>timestamp</code> 或 <code>datetime</code> 类型的，记录一下将三个字段修改为 <code>int</code> 类型的过程。</p>
<p>关于为什么要将 <code>datetime</code> 和 <code>timestamp</code> 两种时间类型替换成 <code>int</code> 类型，可以看一下 <strong>CSDN</strong> 上的这篇文章: <a href="https://blog.csdn.net/adsadadaddadasda/article/details/78933784">MYSQL数据库时间字段INT, TIMESTAMP, DATETIME性能效率比较</a>。</p>
<p><img src="/images/laravel-background.jpg" alt="laravel"></p>
<span id="more"></span>

<h4 id="创建一个测试使用的表"><a href="#创建一个测试使用的表" class="headerlink" title="创建一个测试使用的表"></a>创建一个测试使用的表</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `created_at` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `updated_at` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  `deleted_at` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 COMMENT<span class="operator">=</span><span class="string">&#x27;测试表&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="修改模型中三个字段默认的时间格式"><a href="#修改模型中三个字段默认的时间格式" class="headerlink" title="修改模型中三个字段默认的时间格式"></a>修改模型中三个字段默认的时间格式</h4><p>其实如果只是修改三个字段在数据库中保存的数据类型是非常简单的，这个也是被框架原生支持的。</p>
<p>在 <code>Laravel</code> (PS:以下的 <code>Laravel</code> 代表 <code>Laravel</code> 和 <code>Lumen</code> 两个框架，毕竟它们是差不多的) 的模型基类 <code>Illuminate\Database\Eloquent\Model</code> 中引入了很多 <code>Trait</code>, 其中有一个 <code>Trait</code>: <code>Illuminate\Database\Eloquent\Concerns\HasAttributes</code>，该 <code>Trait</code> 中定义了一个 <code>$dateFormat</code> 属性。该属性表示 <code>Laravel</code> 中三个时间字段和 <code>Illuminate\Database\Eloquent\Concerns\HasAttributes</code> 中 <code>$dates</code> 属性所包含字段的时间格式。</p>
<p>默认的 <code>$dateFormat</code> 属性的时间格式为 <code>Y-m-d H:i:s</code>，该字段可被赋值的值的跟 <code>date</code> 函数的第一个值一样。所以如果将该属性的值设置为 <code>&#39;U&#39;</code> (<a href="https://php.net/manual/zh/function.date.php">详见 date 函数的 format 准换说明</a>) 当通过模型 <code>create</code> 或 <code>save</code> 的方式创建或修改数据库内容时，<code>created_at</code>、<code>updated_at</code> 和 <code>deleted_at</code> 三个字段的值就会被转换为 <code>UNIX</code> 时间戳。</p>
<h5 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h5><ul>
<li>修改默认的时间格式后的模型定义：</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The table associated with the model.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$table</span>      = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The storage format of the model&#x27;s date columns.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$dateFormat</span> = <span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>tinker</code> 创建一条新的数据并查看数据库内容</li>
</ul>
<p><img src="/images/laravel-model-test-create.png" alt="创建结果"><br><img src="/images/laravel-model-test-create-database.png" alt="数据库内容"></p>
<h4 id="将-deleted-at-的默认值修改为非-NULL"><a href="#将-deleted-at-的默认值修改为非-NULL" class="headerlink" title="将 deleted_at 的默认值修改为非 NULL"></a>将 <code>deleted_at</code> 的默认值修改为非 <code>NULL</code></h4><p>但是对我个人习惯来说，我喜欢将这三个字段在数据库中的默认值设置为 0 而不是框架原生支持的 <code>NULL</code>，这样做的原因可以看一下在 <strong>开源中国</strong> 上的一篇文章 <a href="https://my.oschina.net/u/2419285/blog/1480089">mysql 字段设计，尽量设置不允许为null</a></p>
<p>这样的话框架的原生软删除就会碰到一个问题: 所有数据都是被软删除的! 为了防止这些情况发生，看了一下 <code>Laravel</code> 框架软删除的实现，并做了一些兼容，防止在字段的默认值非 <code>NULL</code> 时获取不到数据。</p>
<p>框架原生的软删除主要是依赖 <code>Illuminate\Database\Eloquent\SoftDeletes</code> 这个 <code>Trait</code> 来实现的。在该 <code>Trait</code> 中引入了一个全局的 <code>Scope</code>：<code>Illuminate\Database\Eloquent\SoftDeletingScope</code>，这个 <code>Scope</code> 中主要定义的就是对软删除数据的过滤、回滚等几个方法的实现。如果我们想要修改对 <code>deleted_at</code> 字段的查询过滤，需要重写该 <code>Scope</code> 的几个方法</p>
<h5 id="重写-Illuminate-Database-Eloquent-SoftDeletingScope-的方法"><a href="#重写-Illuminate-Database-Eloquent-SoftDeletingScope-的方法" class="headerlink" title="重写 Illuminate\Database\Eloquent\SoftDeletingScope 的方法"></a>重写 <code>Illuminate\Database\Eloquent\SoftDeletingScope</code> 的方法</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Builder</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">SoftDeletingScope</span> <span class="title">as</span> <span class="title">SystemSoftDeletingScope</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class SoftDeletingScope</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SoftDeletingScope</span> <span class="keyword">extends</span> <span class="title">SystemSoftDeletingScope</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Default value when the resource is not soft deleted</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> int</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> NOT_DELETE_DEFAULT_VALUE = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Apply the scope to a given Eloquent query builder.</span></span><br><span class="line"><span class="comment">     * Filter soft deleted data by default</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Database\Eloquent\Builder $builder</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Database\Eloquent\Model   $model</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">apply</span>(<span class="params">Builder <span class="variable">$builder</span>, Model <span class="variable">$model</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$builder</span>-&gt;where(<span class="variable">$model</span>-&gt;getQualifiedDeletedAtColumn(), <span class="built_in">self</span>::NOT_DELETE_DEFAULT_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add the restore extension to the builder.</span></span><br><span class="line"><span class="comment">     * Add restore extensions to restore soft deleted data back to normal data</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Database\Eloquent\Builder $builder</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">addRestore</span>(<span class="params">Builder <span class="variable">$builder</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$builder</span>-&gt;macro(<span class="string">&#x27;restore&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Builder <span class="variable">$builder</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$builder</span>-&gt;withTrashed();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$builder</span>-&gt;update([<span class="variable">$builder</span>-&gt;getModel()-&gt;getDeletedAtColumn() =&gt; <span class="built_in">self</span>::NOT_DELETE_DEFAULT_VALUE]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add the without-trashed extension to the builder.</span></span><br><span class="line"><span class="comment">     * Filtering data that has been soft deleted</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Database\Eloquent\Builder $builder</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">addWithoutTrashed</span>(<span class="params">Builder <span class="variable">$builder</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$builder</span>-&gt;macro(<span class="string">&#x27;withoutTrashed&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Builder <span class="variable">$builder</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$model</span> = <span class="variable">$builder</span>-&gt;getModel();</span><br><span class="line"></span><br><span class="line">            <span class="variable">$builder</span>-&gt;withoutGlobalScope(<span class="keyword">$this</span>)-&gt;where(<span class="variable">$model</span>-&gt;getQualifiedDeletedAtColumn(),</span><br><span class="line">                <span class="built_in">self</span>::NOT_DELETE_DEFAULT_VALUE);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$builder</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Add the only-trashed extension to the builder.</span></span><br><span class="line"><span class="comment">     * Add an extension to retrieve only data that has been soft deleted</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> \Illuminate\Database\Eloquent\Builder $builder</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">addOnlyTrashed</span>(<span class="params">Builder <span class="variable">$builder</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$builder</span>-&gt;macro(<span class="string">&#x27;onlyTrashed&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">Builder <span class="variable">$builder</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$model</span> = <span class="variable">$builder</span>-&gt;getModel();</span><br><span class="line"></span><br><span class="line">            <span class="variable">$builder</span>-&gt;withoutGlobalScope(<span class="keyword">$this</span>)-&gt;where(<span class="variable">$model</span>-&gt;getQualifiedDeletedAtColumn(), <span class="string">&#x27;!=&#x27;</span>,</span><br><span class="line">                <span class="built_in">self</span>::NOT_DELETE_DEFAULT_VALUE);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$builder</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="定义模型并验证结果"><a href="#定义模型并验证结果" class="headerlink" title="定义模型并验证结果"></a>定义模型并验证结果</h5><ul>
<li>模型定义:</li>
</ul>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">SoftDeletes</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Database</span>\<span class="title">Eloquent</span>\<span class="title">Model</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/** Introduced framework native soft deletes */</span></span><br><span class="line">    <span class="keyword">use</span> <span class="title">SoftDeletes</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Modify the framework native soft delete lock dependent</span></span><br><span class="line"><span class="comment">     * global scope to be custom scope</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">bootSoftDeletes</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">static</span>::addGlobalScope(<span class="keyword">new</span> SoftDeletingScope);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The table associated with the model.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$table</span>      = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The storage format of the model&#x27;s date columns.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$dateFormat</span> = <span class="string">&#x27;U&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用 <code>tinker</code> 命令软删除一条数据并验证结果</li>
</ul>
<p><img src="/images/laravel-model-test-delete.png" alt="软删除结果"><br><img src="/images/laravel-model-test-delete-database.png" alt="数据库内容"></p>
<ul>
<li>软删除数据后查询</li>
</ul>
<p><img src="/images/laravel-model-test-queries.png" alt="软删除结果"></p>
<p>其他的方法和操作就不贴出来了 (PS:怪麻烦的)。总的来说 <code>Laravel</code> 框架及其的好用，但是有些地方为了个人的习惯和逻辑可能需要稍稍的改动。不过在修改的过程中可以学到很多东西，<code>Laravel</code> 作者在设计框架的时候使用了非常多的设计模式。</p>
]]></content>
      <tags>
        <tag>Lravel</tag>
        <tag>PHP</tag>
        <tag>Lumen</tag>
      </tags>
  </entry>
  <entry>
    <title>Laravel/Lumen 在项目中的一些实践</title>
    <url>/posts/laravel-project-practice.html</url>
    <content><![CDATA[<p><code>Laravel/Lumen</code> 应该是目前最受欢迎的框架了, 所以它们的社区也是最活跃的, 扩展包扽支持也是最多的; 从 <code>18</code> 年工作开始我们一直都在使用 <code>Laravel/Lumen</code>, 也在项目中对它做出来一些修改, 用于更好、更快的开发项目</p>
<h4 id="关于-DB-类的一些实践"><a href="#关于-DB-类的一些实践" class="headerlink" title="关于 DB 类的一些实践"></a>关于 <code>DB</code> 类的一些实践</h4><p>通过 <code>DB::listen</code> 监听所有执行的 <code>SQL</code> 语句, 这个操作也可以通过查看 <code>mysql</code> 的查询日志实现, 但是调试的过程中还是没有直接写一个函数来的方便 </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">&#x27;print_sql&#x27;</span>)) &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * To monitor and print execute SQL statements</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bool $die</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">print_sql</span>(<span class="params"><span class="variable">$die</span> = <span class="literal">false</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        \Illuminate\Support\Facades\DB::listen(<span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$sql</span></span>) <span class="keyword">use</span> (<span class="params"><span class="variable">$die</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$singleSql</span> = <span class="variable">$sql</span>-&gt;sql;</span><br><span class="line">            <span class="variable">$function</span>  = <span class="variable">$die</span> ? <span class="string">&#x27;dd&#x27;</span> : <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$sql</span>-&gt;bindings) &#123;</span><br><span class="line">                <span class="keyword">foreach</span> (<span class="variable">$sql</span>-&gt;bindings <span class="keyword">as</span> <span class="variable">$replace</span>) &#123;</span><br><span class="line">                    <span class="variable">$value</span>     = is_numeric(<span class="variable">$replace</span>) ? <span class="variable">$replace</span> : <span class="string">&quot;&#x27;&quot;</span> . <span class="variable">$replace</span> . <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">                    <span class="variable">$singleSql</span> = preg_replace(<span class="string">&#x27;/\?/&#x27;</span>, <span class="variable">$value</span>, <span class="variable">$singleSql</span>, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable">$function</span>(<span class="variable">$singleSql</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$function</span>(<span class="variable">$singleSql</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h5 id="Laravel-lumen-有两种使用事务的方式"><a href="#Laravel-lumen-有两种使用事务的方式" class="headerlink" title="Laravel/lumen 有两种使用事务的方式"></a><code>Laravel/lumen</code> 有两种使用事务的方式</h5><ul>
<li>一种是通过 <code>DB::rollBack()</code> 开始事务; <code>DB::rollback()</code> 或 <code>DB::commit()</code> 回滚或提交事务</li>
<li>一种是通过 <code>DB::transaction(\Closure $callback)</code> 的方式</li>
</ul>
<p>推荐的用法是 <code>DB::transaction</code> 的方式, 它的实现: </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Execute a Closure within a transaction.</span></span><br><span class="line"><span class="comment"> * \Illuminate\Database\Concerns\ManagesTransactions</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  \Closure  $callback</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  int  $attempts</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> \Exception|\Throwable</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">transaction</span>(<span class="params"><span class="built_in">Closure</span> <span class="variable">$callback</span>, <span class="variable">$attempts</span> = <span class="number">1</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$currentAttempt</span> = <span class="number">1</span>; <span class="variable">$currentAttempt</span> &lt;= <span class="variable">$attempts</span>; <span class="variable">$currentAttempt</span>++) &#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;beginTransaction();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We&#x27;ll simply execute the given callback within a try / catch block and if we</span></span><br><span class="line">        <span class="comment">// catch any exception we can rollback this transaction so that none of this</span></span><br><span class="line">        <span class="comment">// gets actually persisted to a database or stored in a permanent fashion.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> tap(<span class="variable">$callback</span>(<span class="keyword">$this</span>), <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;commit();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If we catch an exception we&#x27;ll rollback this transaction and try again if we</span></span><br><span class="line">        <span class="comment">// are not out of attempts. If we are out of attempts we will just throw the</span></span><br><span class="line">        <span class="comment">// exception back out and let the developer handle an uncaught exceptions.</span></span><br><span class="line">        <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;handleTransactionException(</span><br><span class="line">                <span class="variable">$e</span>, <span class="variable">$currentAttempt</span>, <span class="variable">$attempts</span></span><br><span class="line">            );</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="built_in">Throwable</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;rollBack();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="variable">$e</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>从实现中可以看出, 它也是使用的 <code>beginTransaction</code>、<code>commit</code>、<code>rollBack</code> 去控制事务, 但是只要出现 <code>Exception</code> 就会自动会滚, 不用自己去关心事务回滚和提交</p>
<h4 id="引入-Context-的概念"><a href="#引入-Context-的概念" class="headerlink" title="引入 Context 的概念"></a>引入 <code>Context</code> 的概念</h4><p>在这整个框架的整个生命周期里, 会有一些数据需要全局共享, 但是 <code>Laravel/Lumen</code> 并没有给出统一的接口; 在觉早期的项目中我们都是存放在 <code>session</code> 中, 后来我们弃用了 <code>session</code>. 所以我们引入了一个 <code>Context</code> 的概念, 将所有的共享数据都放在 <code>Context</code> 中</p>
<h5 id="Context-的具体实现"><a href="#Context-的具体实现" class="headerlink" title="Context 的具体实现"></a><code>Context</code> 的具体实现</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Foundation</span>\<span class="title">Handlers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Closure</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Arr</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Str</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Exception</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>\<span class="title">Response</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class ContextHandler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Foundation\Handlers</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContextHandler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Example of the current class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> $this ;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="variable">$instance</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Data store</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="variable">$data</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The protected constructor prohibits the creation of an</span></span><br><span class="line"><span class="comment">     * instance of the current class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ContextHandler constructor.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The protected clone magic method forbids the current class</span></span><br><span class="line"><span class="comment">     * from being cloned</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an instance of the current class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>): <span class="title">ContextHandler</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">static</span>::<span class="variable">$instance</span>) &#123;</span><br><span class="line">            <span class="built_in">static</span>::<span class="variable">$instance</span> = <span class="keyword">new</span> <span class="built_in">self</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">static</span>::<span class="variable">$instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set a data to current class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed  $value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$key</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$value</span> <span class="keyword">instanceof</span> <span class="built_in">Closure</span>) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="variable">$value</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Arr::set(<span class="built_in">static</span>::<span class="variable">$data</span>, Str::snake(<span class="variable">$key</span>), <span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get a data by current class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string|array  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  null|mixed  $default</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$key</span>, <span class="variable">$default</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arr::get(<span class="built_in">static</span>::<span class="variable">$data</span>, <span class="variable">$key</span>, <span class="variable">$default</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets part of the specified data from the data set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array  $keys</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">only</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$keys</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Arr::only(<span class="built_in">static</span>::<span class="variable">$data</span>, <span class="variable">$keys</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Determine if there is any data in the data set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">has</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$key</span></span>): <span class="title">bool</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> array_key_exists(<span class="variable">$key</span>, <span class="built_in">static</span>::<span class="variable">$data</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed  $value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$key</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;set(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * If $data contains the data that needs to be retrieved,</span></span><br><span class="line"><span class="comment">     * return it directly If there is no corresponding</span></span><br><span class="line"><span class="comment">     * access method</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed|null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;has(<span class="variable">$key</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="variable">$key</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$method</span> = <span class="string">&#x27;get&#x27;</span>.ucfirst(Str::camel(<span class="variable">$key</span>)).<span class="string">&#x27;Attribute&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, <span class="variable">$method</span>)) &#123;</span><br><span class="line">            <span class="variable">$value</span> = <span class="keyword">$this</span>-&gt;<span class="variable">$method</span>();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;set(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the subscript of the data set based on the method name</span></span><br><span class="line"><span class="comment">     * Determine whether there is data in the data set</span></span><br><span class="line"><span class="comment">     * Calls private or protected methods when data does not exist</span></span><br><span class="line"><span class="comment">     * And stored in the data set for reuse</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $method</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array  $parameters</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$method</span>, <span class="keyword">array</span> <span class="variable">$parameters</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$key</span> = Str::snake(<span class="variable">$method</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">$this</span>-&gt;has(<span class="variable">$key</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;get(<span class="variable">$key</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!method_exists(<span class="keyword">$this</span>, <span class="variable">$method</span>)) &#123;</span><br><span class="line">            <span class="variable">$message</span> = sprintf(<span class="string">&#x27;Method %s::%s does not exist.&#x27;</span>, <span class="built_in">static</span>::class, <span class="variable">$method</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="variable">$message</span>, Response::HTTP_INTERNAL_SERVER_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$value</span> = <span class="keyword">$this</span>-&gt;<span class="variable">$method</span>(...<span class="variable">$parameters</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;set(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Gets the routing alias for this request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed|string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getRouteNameAttribute</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$route_params</span> = Request::route() ?: [];</span><br><span class="line">        <span class="variable">$route_name</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$route_params</span> <span class="keyword">as</span> <span class="variable">$route_param</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (is_array(<span class="variable">$route_param</span>) &amp;&amp; array_key_exists(<span class="string">&#x27;as&#x27;</span>, <span class="variable">$route_param</span>)) &#123;</span><br><span class="line">                <span class="variable">$route_name</span> = <span class="variable">$route_param</span>[<span class="string">&#x27;as&#x27;</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$route_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="修改-AppServiceProvider-注册单例"><a href="#修改-AppServiceProvider-注册单例" class="headerlink" title="修改 AppServiceProvider 注册单例"></a>修改 <code>AppServiceProvider</code> 注册单例</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Foundation</span>\<span class="title">Handlers</span>\<span class="title">ContextHandler</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register any application services.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="string">&#x27;context&#x27;</span>, ContextHandler::getInstance());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="添加一个-Facade"><a href="#添加一个-Facade" class="headerlink" title="添加一个 Facade"></a>添加一个 <code>Facade</code></h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Foundation</span>\<span class="title">Facades</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Facade</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Repositories</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Foundation\Facades;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> static mixed set(string $key, $value)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> static mixed get($key, $default = null)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> static array only(array $keys)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> static bool has(string $key)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span> <span class="keyword">extends</span> <span class="title">Facade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeAccessor</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;context&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体的测试逻辑, 我就不写了, 这个概念在我们项目中已经使用了很久, 是一个比较成熟的想法; 类似的实现还有很多, 有人也提出使用 <code>Cache::driver(&#39;array&#39;)</code> 的方式去共享数据.</p>
<h4 id="引入-Service-模式"><a href="#引入-Service-模式" class="headerlink" title="引入 Service 模式"></a>引入 <code>Service</code> 模式</h4><p>在早期的项目里, 我们把所有的业务逻辑都写到 <code>Controller</code> 中, 造成每个 <code>Controller</code> 非常臃肿, 且无法封装重复的代码, 对维护和开发都很不友好; 最后我们选择引入 <code>Service</code> 模式, 将业务逻辑都封装到 <code>Service</code> 中方便维护和开发; 到现在为止, 我们的 <code>Controller</code> 中只有对 <code>Service</code> 的调用和响应返回 (除了是 5 行以内能够解决的逻辑可以直接写到 <code>Controller</code>)</p>
<p>一开始引入 <code>Service</code> 这个概念的时候, 我们通过依赖注入的方式将每个 <code>Service</code> 都注入到 <code>Controller</code>, 但是 <code>Service</code> 也有互相引用的问题, 这样的情况就没有办法依赖注入; 所以我们把所有的 <code>Service</code> 实例都放到了 <code>Context</code> 中, 哪里需要哪里调用</p>
<h5 id="Service-伪单例的具体实现"><a href="#Service-伪单例的具体实现" class="headerlink" title="Service 伪单例的具体实现"></a><code>Service</code> 伪单例的具体实现</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Foundation</span>\<span class="title">Handlers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Foundation</span>\<span class="title">Facades</span>\<span class="title">Context</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Str</span>;</span><br><span class="line"><span class="keyword">use</span> \<span class="title">Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class ClassesStorageHandler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Foundation\Handlers;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClassesStorageHandler</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A namespace for the singleton class group is required</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$namespace</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A suffix for the singleton class group is required</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$suffix</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ClassesStorageHandler constructor</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $namespace</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $suffix</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$namespace</span>, <span class="keyword">string</span> <span class="variable">$suffix</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;namespace = <span class="variable">$namespace</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;suffix = <span class="variable">$suffix</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the real from the context by calling getXxx</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string  $methodName</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$methodName</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$saveKey</span> = Str::snake(get_class(<span class="keyword">$this</span>));</span><br><span class="line">        <span class="variable">$objects</span> = Context::get(<span class="variable">$saveKey</span>, []);</span><br><span class="line">        <span class="variable">$name</span> = Str::snake(preg_replace(<span class="string">&#x27;/get/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$methodName</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (array_key_exists(<span class="variable">$name</span>, <span class="variable">$objects</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$objects</span>[<span class="variable">$name</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$objectName</span> = ucfirst(Str::camel(<span class="variable">$name</span>));</span><br><span class="line">        <span class="keyword">$this</span>-&gt;namespace &amp;&amp; <span class="variable">$objectName</span> = <span class="keyword">$this</span>-&gt;namespace.<span class="variable">$objectName</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;suffix &amp;&amp; <span class="variable">$objectName</span> = <span class="variable">$objectName</span>.<span class="keyword">$this</span>-&gt;suffix;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!class_exists(<span class="variable">$objectName</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Class &#x27;</span>.<span class="variable">$objectName</span>.<span class="string">&#x27; Not found&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$object</span> = app(<span class="variable">$objectName</span>);</span><br><span class="line">        <span class="variable">$objects</span>[<span class="variable">$name</span>] = <span class="variable">$object</span>;</span><br><span class="line">        Context::set(<span class="variable">$saveKey</span>, <span class="variable">$object</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$object</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="修改-AppServiceProvider-注册单例-1"><a href="#修改-AppServiceProvider-注册单例-1" class="headerlink" title="修改 AppServiceProvider 注册单例"></a>修改 <code>AppServiceProvider</code> 注册单例</h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Foundation</span>\<span class="title">Handlers</span>\<span class="title">ClassesStorageHandler</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Foundation</span>\<span class="title">Handlers</span>\<span class="title">ContextHandler</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Register any application services.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">register</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="string">&#x27;context&#x27;</span>, ContextHandler::getInstance());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/** <span class="doctag">@var</span> string $servicesNamespace 所有 service命名空间 */</span></span><br><span class="line">        <span class="variable">$servicesNamespace</span> = config(<span class="string">&#x27;app.services_namespace&#x27;</span>);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;singleton(<span class="string">&#x27;services&#x27;</span>, <span class="keyword">new</span> ClassesStorageHandler(</span><br><span class="line">            <span class="variable">$servicesNamespace</span>, <span class="string">&#x27;Service&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="添加一个-Facade-1"><a href="#添加一个-Facade-1" class="headerlink" title="添加一个 Facade"></a>添加一个 <code>Facade</code></h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Foundation</span>\<span class="title">Facades</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">App</span>\<span class="title">Repositories</span>\<span class="title">UsersRepository</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Facades</span>\<span class="title">Facade</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class Repositories</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@package</span> App\Foundation\Facades;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> static UserService getUsers()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Services</span> <span class="keyword">extends</span> <span class="title">Facade</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getFacadeAccessor</span>(<span class="params"></span>): <span class="title">string</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;services&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>下面就可以直接全局使用 <code>Services::getUsers()</code> 的方式直接获取到 <code>UserService</code> 的实例</p>
<h4 id="Lumen-中使用-Laravel-的一些组件"><a href="#Lumen-中使用-Laravel-的一些组件" class="headerlink" title="Lumen 中使用 Laravel 的一些组件"></a><code>Lumen</code> 中使用 <code>Laravel</code> 的一些组件</h4><p><code>Lumen</code> 是 <code>Laravel</code> 的精简版, 所有有些 <code>Laravel</code> 功能是没有的, 很奇怪的是, 虽然有些功能没法使用, 但它其实是集成了的, 只是需要额外的去配置才可以 (这一点就真的让我迷的不行, 可能是因为 <code>Laravel</code> 的 <code>composer</code> 包并没有分那么细)</p>
<h5 id="Lumen-中使用-Form-Request"><a href="#Lumen-中使用-Form-Request" class="headerlink" title="Lumen 中使用 Form Request"></a><code>Lumen</code> 中使用 <code>Form Request</code></h5><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">App</span>\<span class="title">Http</span>\<span class="title">Requests</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Request</span> <span class="title">as</span> <span class="title">IlluminateRequest</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Response</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">JsonResponse</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">Arr</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Laravel</span>\<span class="title">Lumen</span>\<span class="title">Http</span>\<span class="title">Redirector</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Container</span>\<span class="title">Container</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Validation</span>\<span class="title">Validator</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Validation</span>\<span class="title">UnauthorizedException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Http</span>\<span class="title">Exceptions</span>\<span class="title">HttpResponseException</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Validation</span>\<span class="title">ValidatesWhenResolvedTrait</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Validation</span>\<span class="title">ValidatesWhenResolved</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Validation</span>\<span class="title">Factory</span> <span class="title">as</span> <span class="title">ValidationFactory</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Request</span> <span class="keyword">extends</span> <span class="title">IlluminateRequest</span> <span class="keyword">implements</span> <span class="title">ValidatesWhenResolved</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">ValidatesWhenResolvedTrait</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The container instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> \Illuminate\Container\Container</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$container</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The redirector instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> \Laravel\Lumen\Http\Redirector</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$redirector</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The route to redirect to if validation fails.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$redirectRoute</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The controller action to redirect to if validation fails.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$redirectAction</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The key to be used for the view error bag.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> string</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$errorBag</span> = <span class="string">&#x27;default&#x27;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The input keys that should not be flashed on redirect.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$dontFlash</span> = [<span class="string">&#x27;password&#x27;</span>, <span class="string">&#x27;password_confirmation&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the validator instance for the request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Contracts\Validation\Validator</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">getValidatorInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$factory</span> = <span class="keyword">$this</span>-&gt;container-&gt;make(ValidationFactory::class);</span><br><span class="line">        <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, <span class="string">&#x27;validator&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;container-&gt;call([<span class="keyword">$this</span>, <span class="string">&#x27;validator&#x27;</span>], compact(<span class="string">&#x27;factory&#x27;</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$factory</span>-&gt;make(<span class="keyword">$this</span>-&gt;validationData(), <span class="keyword">$this</span>-&gt;container-&gt;call([<span class="keyword">$this</span>, <span class="string">&#x27;rules&#x27;</span>]), <span class="keyword">$this</span>-&gt;messages(),</span><br><span class="line">            <span class="keyword">$this</span>-&gt;attributes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get data to be validated from the request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">validationData</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;all();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle a failed validation attempt.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Contracts\Validation\Validator  $validator</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Illuminate\Http\Exceptions\HttpResponseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">failedValidation</span>(<span class="params">Validator <span class="variable">$validator</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> HttpResponseException(<span class="keyword">$this</span>-&gt;response(<span class="keyword">$this</span>-&gt;formatErrors(<span class="variable">$validator</span>)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Determine if the request passes the authorization check.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> bool</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">passesAuthorization</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (method_exists(<span class="keyword">$this</span>, <span class="string">&#x27;authorize&#x27;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;container-&gt;call([<span class="keyword">$this</span>, <span class="string">&#x27;authorize&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Handle a failed authorization attempt.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> \Illuminate\Http\Exceptions\HttpResponseException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">failedAuthorization</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//        throw new HttpResponseException($this-&gt;forbiddenResponse());</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnauthorizedException(<span class="keyword">$this</span>-&gt;forbiddenResponse());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the proper failed validation response for the request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  array  $errors</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\JsonResponse</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">response</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$errors</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JsonResponse(<span class="variable">$errors</span>, <span class="number">422</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the response for a forbidden operation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> \Illuminate\Http\Response</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">forbiddenResponse</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Response(<span class="string">&#x27;Forbidden&#x27;</span>, <span class="number">403</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Format the errors from the given Validator instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Contracts\Validation\Validator  $validator</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">formatErrors</span>(<span class="params">Validator <span class="variable">$validator</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$validator</span>-&gt;getMessageBag()-&gt;toArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the Redirector instance.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Laravel\Lumen\Http\Redirector  $redirector</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setRedirector</span>(<span class="params">Redirector <span class="variable">$redirector</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;redirector = <span class="variable">$redirector</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Set the container implementation.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Illuminate\Container\Container  $container</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> $this</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setContainer</span>(<span class="params">Container <span class="variable">$container</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;container = <span class="variable">$container</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get custom messages for validator errors.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">messages</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get custom attributes for validator errors.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">attributes</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the route handling the request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  string|null  $param</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  mixed        $default</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> mixed</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params"><span class="variable">$param</span> = <span class="literal">null</span>, <span class="variable">$default</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$route</span> = call_user_func(<span class="keyword">$this</span>-&gt;getRouteResolver());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (is_null(<span class="variable">$route</span>) || is_null(<span class="variable">$param</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$route</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$parameters</span> = end(<span class="variable">$route</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Arr::get(<span class="variable">$parameters</span>, <span class="variable">$param</span>, <span class="variable">$default</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>添加 <code>RequestServiceProvider</code></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span>  <span class="title">App</span>\<span class="title">Providers</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Laravel</span>\<span class="title">Lumen</span>\<span class="title">Http</span>\<span class="title">Redirector</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Support</span>\<span class="title">ServiceProvider</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Symfony</span>\<span class="title">Component</span>\<span class="title">HttpFoundation</span>\<span class="title">Request</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Illuminate</span>\<span class="title">Contracts</span>\<span class="title">Validation</span>\<span class="title">ValidatesWhenResolved</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestServiceProvider</span> <span class="keyword">extends</span> <span class="title">ServiceProvider</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Bootstrap the application services.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">boot</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;afterResolving(ValidatesWhenResolved::class, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$resolved</span></span>) </span>&#123;</span><br><span class="line">            <span class="variable">$resolved</span>-&gt;validateResolved();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">$this</span>-&gt;app-&gt;resolving(FormRequest::class, <span class="function"><span class="keyword">function</span> (<span class="params"><span class="variable">$request</span>, <span class="variable">$app</span></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;initializeRequest(<span class="variable">$request</span>, <span class="variable">$app</span>[<span class="string">&#x27;request&#x27;</span>]);</span><br><span class="line">            <span class="variable">$request</span>-&gt;setContainer(<span class="variable">$app</span>)-&gt;setRedirector(<span class="variable">$app</span>-&gt;make(Redirector::class));</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize the form request with data from the given request.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  FormRequest                                $form</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  \Symfony\Component\HttpFoundation\Request  $current</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">initializeRequest</span>(<span class="params">FormRequest <span class="variable">$form</span>, Request <span class="variable">$current</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$files</span> = <span class="variable">$current</span>-&gt;files-&gt;all();</span><br><span class="line">        <span class="variable">$files</span> = is_array(<span class="variable">$files</span>) ? array_filter(<span class="variable">$files</span>) : <span class="variable">$files</span>;</span><br><span class="line">        <span class="variable">$form</span>-&gt;initialize(<span class="variable">$current</span>-&gt;query-&gt;all(), <span class="variable">$current</span>-&gt;request-&gt;all(), <span class="variable">$current</span>-&gt;attributes-&gt;all(),</span><br><span class="line">            <span class="variable">$current</span>-&gt;cookies-&gt;all(), <span class="variable">$files</span>, <span class="variable">$current</span>-&gt;server-&gt;all(), <span class="variable">$current</span>-&gt;getContent());</span><br><span class="line">        <span class="variable">$form</span>-&gt;setJson(<span class="variable">$current</span>-&gt;json());</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$session</span> = <span class="variable">$current</span>-&gt;getSession()) &#123;</span><br><span class="line">            <span class="variable">$form</span>-&gt;setLaravelSession(<span class="variable">$session</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$form</span>-&gt;setUserResolver(<span class="variable">$current</span>-&gt;getUserResolver());</span><br><span class="line">        <span class="variable">$form</span>-&gt;setRouteResolver(<span class="variable">$current</span>-&gt;getRouteResolver());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Lumen</tag>
        <tag>Laravel</tag>
        <tag>Php</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx logs</title>
    <url>/posts/nginx-log.html</url>
    <content><![CDATA[<p>对于 <code>web</code> 服务器来说, 日志是不可缺少的一部分, 对于服务器排错、统计都很有用。<code>nginx</code> 的日志主要分为两种: <code>access_log</code> (访问日志) 和 <code>error_log</code> (错误日志)。通过访问日志我们可以获取到用户的 <code>IP</code> 地址、浏览器信息、请求处理时间等信息，而请求处理时间对于程序员来说是一个及其重要的东西, 毕竟它可以看出来你的代码烂不烂。错误日志记录了访问日志出错的信息, 可以帮我们快速定位错误的位置、原因等重要因素</p>
<p><img src="/images/nginx-desc-page.jpg" alt="image"></p>
<span id="more"></span>

<h4 id="nginx-错误日志信息介绍"><a href="#nginx-错误日志信息介绍" class="headerlink" title="nginx 错误日志信息介绍"></a><code>nginx</code> 错误日志信息介绍</h4><p>配置记录 <code>nginx</code> 的错误信息是调试 <code>nginx</code> 服务的重要手段,属于核心功能模块 <code>ngx_core_module</code> 的参数,该参数名为 <code>error_log</code> ,可以放在 <code>Main</code> 区块中作为全局配置,也可以单独放在不同的虚拟主机中单独记录<br><br><code>error_log</code> 的语法格式及参数说明如下:<br></p>
<table>
<thead>
<tr>
<th>error_log</th>
<th>file_path</th>
<th>level</th>
</tr>
</thead>
<tbody><tr>
<td>关键字</td>
<td>日志文件路径</td>
<td>错误级别</td>
</tr>
</tbody></table>
<p>其中,关键字 <code>error_log</code> 不能改变,日志文件路径可以指定任意存放日志的目录,错误级别常见的有 <code>[debug|info|notice|warn|error|crit|alert|emerg]</code> ,级别越高纪录的信息越少,生产环境一般是 <code>[warn|error|crit]</code> 这三个级别之一</p>
<blockquote>
<p>注意:尽量不要配置 <code>info</code> 等较低级别的错误级别,这样会带来大量的 <code>I/O</code> 消耗</p>
</blockquote>
<p><code>error_log</code> 的默认值为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">default: error_log logs/error.log error;</span><br></pre></td></tr></table></figure>
<p>可以放置的标签段为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">context: main; http; server; location</span><br></pre></td></tr></table></figure>

<h4 id="nginx-访问日志介绍"><a href="#nginx-访问日志介绍" class="headerlink" title="nginx 访问日志介绍"></a><code>nginx</code> 访问日志介绍</h4><p><code>nginx</code> 会把每个用户访问网站的日志信息记录到自定的日志文件中,供网站提供者分析用户的浏览行为等。客户端向 <code>nginx</code> 服务器发起的每一次请求都会记录到访问日志中,客户端IP，浏览器信息, <code>referer</code>, 请求处理时间, 请求URL等都可以在访问日志中得到。当然具体要记录哪些信息，你可以通过 <code>log_format</code> 指令定义。此功能由 <code>ngx_http_log_module</code> 模块负责</p>
<p><code>nginx</code> 访问日志语法:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">access_log path [format [buffer=size] [gzip[=level]] [flush=time] [if=condition]];</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>path</td>
<td>指定日志的存放位置</td>
</tr>
<tr>
<td>format</td>
<td>用来定义记录日志的格式(可以定义多种日志格式,取不同的名字即可)</td>
</tr>
<tr>
<td>access_log</td>
<td>用来自定日志文件的路径及使用何种日志格式记录日志</td>
</tr>
<tr>
<td>buffer</td>
<td>用来指定日志写入时的缓存大小。默认是64k</td>
</tr>
<tr>
<td>gzip</td>
<td>日志写入前先进行压缩。压缩率可以指定，从1到9数值越大压缩比越高，同时压缩的速度也越慢。默认是1</td>
</tr>
<tr>
<td>flush</td>
<td>设置缓存的有效时间。如果超过flush指定的时间，缓存中的内容将被清空</td>
</tr>
<tr>
<td>if</td>
<td>条件判断。如果指定的条件计算为0或空字符串，那么该请求不会写入日志</td>
</tr>
</tbody></table>
<blockquote>
<p>一般场景中,这些参数都不用配置,极端优化时才可能会考虑这些参数</p>
</blockquote>
<blockquote>
<p><code>access_log off</code> 中的 <code>off</code> ,表示不记录访问日志</p>
</blockquote>
<h5 id="使用-log-format-自定义访问日志格式"><a href="#使用-log-format-自定义访问日志格式" class="headerlink" title="使用 log_format 自定义访问日志格式"></a>使用 <code>log_format</code> 自定义访问日志格式</h5><p>日志格式定义说明</p>
<p>定义语法</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">log_format name [escape=default|json] string ...;</span><br></pre></td></tr></table></figure>

<p>如下例:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">access_log /var/logs/nginx-access.log main</span><br><span class="line">log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                &#x27;&quot;$http_user_agent&quot; &quot;$http_x_frowarded_for&quot;&#x27;</span><br></pre></td></tr></table></figure>

<p>其中, <code>log_format</code> 为日志格式关键参数,不能随意改变。<br><code>main</code> 是为日志格式指定的标签,记录日志时会通过这个 <code>main</code> 标签选择指定的格式。标签后面跟着的都是可以记录的日志信息。</p>
<p>具体日志参数信息如下:</p>
<table>
<thead>
<tr>
<th>nginx 日志变量</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>$remote_addr</td>
<td>记录访问网站的客户端IP地址</td>
</tr>
<tr>
<td>$http_x_forwarded_for</td>
<td>当前端游代理服务器时,是指 Web 节点记录客户端地址的配置,此参数生效的前提是代理服务器上也进行了相关的 x_forwarded_for 设置</td>
</tr>
<tr>
<td>$remote_user</td>
<td>远程客户端名称</td>
</tr>
<tr>
<td>$time_local</td>
<td>记录访问时间与时区</td>
</tr>
<tr>
<td>$request</td>
<td>用户的 http 请求起始行信息</td>
</tr>
<tr>
<td>$status</td>
<td>http 状态码,记录请求返回的状态,例如:200、404、301 等</td>
</tr>
<tr>
<td>$body_bytes_sents</td>
<td>服务器发送给客户端的响应的 body 字节数</td>
</tr>
<tr>
<td>$http_referer</td>
<td>记录此次请求是从哪个链接访问过来的,可以根据 referer 进行防盗链设置</td>
</tr>
<tr>
<td>$http_user_agent</td>
<td>记录客户端访问信息,例如:浏览器、手机客户端等</td>
</tr>
</tbody></table>
<blockquote>
<p>所有的日志段以空格分割,一行可以记录多个</p>
</blockquote>
<blockquote>
<p>在没有特殊要求的情况下,采用默认配置即可,更多可以设置的目录日志信息的变量见 <a href="http://nginx.org/en/docs/http/ngx_http_log_module.html">nginx日志变量</a></p>
</blockquote>
<p>访问日志可以放置的标签段为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">context: http; server; location; if in location; limit_except</span><br></pre></td></tr></table></figure>

<p><a href="http://nginx.org/en/docs/http/ngx_http_log_module.html">更多内容参考 nginx 官方网站</a></p>
<h4 id="nginx-日志切割"><a href="#nginx-日志切割" class="headerlink" title="nginx 日志切割"></a><code>nginx</code> 日志切割</h4><p>默认情况下 <code>nginx</code> 会把所有的访问日志生成到一个指定的访问日志文件 <code>access.log</code> 中,但这样一来,时间长了就导致日志文件内容过大,不利于日志的分析或处理,因此,一般做法会将 <code>nginx</code> 的访问日志按天或按小时进行分割,分成不同的文件保存。</p>
<p>新建一个 <code>shell</code> 脚本 <code>cut_nginx_log.sh</code>,内容如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">DateFormat=`date +%Y%m%d`</span><br><span class="line">LogDir=&quot;/application/nginx/logs&quot;</span><br><span class="line">LogName=&quot;access_default&quot;;</span><br><span class="line">[ -d $LogDir ] &amp;&amp; cd $LogDir || exit 1</span><br><span class="line">[ -f $&#123;LogName&#125;.log ] || exit 1</span><br><span class="line">/bin/mv $&#123;LogName&#125;.log $&#123;DateFormat&#125;_$&#123;LogName&#125;.log</span><br><span class="line">/bin/touch $&#123;LogName&#125;.log</span><br></pre></td></tr></table></figure>
<blockquote>
<p>脚本实现切割 <code>nginx</code> 日志的思想,是将正在写入的 <code>nginx</code> 日志 <code>access_defalut</code> 修改为带日期的的格式文件 <code>xxx_xx_xx_access_default</code>, 然后新建一个 <code>access_default</code> 文件</p>
</blockquote>
<p>通过定时任务的方式实现每日 00 点整定时执行 <code>cut_nginx_log.sh</code> 切割日志,将以下内容写入到 <code>/var/spool/cron/root</code> 中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#每日0点切割nginx日志 \</span><br><span class="line">00 00 * * * /bin/sh script_path/cut_nginx_log.sh &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>查看 <code>crontab</code> 是否添加成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ crontab -l</span><br><span class="line"></span><br><span class="line">#每日0点切割nginx日志 \</span><br><span class="line">00 00 * * * /bin/sh script_path/cut_nginx_log.sh &gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>Nginx</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Opcache 最佳设置</title>
    <url>/posts/opcache-performance-tunin.html</url>
    <content><![CDATA[<p>在网上无意中看到的一篇 <a href="https://www.scalingphpbook.com/blog/2014/02/14/best-zend-opcache-settings.html">文章</a>, 这哥们非常简洁地谈论了 <code>Zend Opcache</code> 的最佳设置, 他说他为此花了大量的时间探索 <code>Zend Opcache</code> 的每个设置选项的细节, 甚至是阅读它的源代码, 并且在自己的项目中实践 (一个每天有 117 <code>million</code> 的 <code>HTTP</code> 请求的应用) . 个人觉得这种文章相当有指导意义, 所以特地把它的设置方式摘译如下 (格式有些修改).</p>
<span id="more"></span>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">opcache.revalidate_freq</span><br></pre></td></tr></table></figure>

<p>这个选项用于设置缓存的过期时间 (单位是秒), 当这个时间达到后, <code>Opcache</code> 会检查你的代码是否改变, 如果改变了 <code>PHP</code> 会重新编译它, 生成新的 <code>Opcode</code>, 并且更新缓存. 值为 “0” 表示每次请求都会检查你的 <code>PHP</code> 代码是否更新 (这意味着会增加很多次 <code>PHP</code> 系统调用, 译注: <code>stat</code> 系统调用是读取文件的状态, 这里主要是获取最近修改时间, 这个系统调用会发生磁盘 <code>stat</code>, 所以必然会消耗一些 <code>stat</code> 时间, 当然系统调用本身也会消耗一些 <code>CPU</code> 时间) . 可以在开发环境中把它设置为 0, 生产环境下不用管, 因为下面会介绍另外一个设置选项. </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">opcache.validate_timestamps</span><br></pre></td></tr></table></figure>

<p>当这个选项被启用 (设置为 1) , <code>PHP</code> 会在 <code>opcache.revalidate_freq</code> 设置的时间到达后检测文件的时间戳 (<code>timestamp</code>) . </p>
<p>如果这个选项被禁用 (设置为 0) , <code>opcache.revalidate_freq</code> 会被忽略, <code>PHP</code> 文件永远不会被检查. 这意味着如果你修改了你的代码, 然后你把它更新到服务器上, 再在浏览器上请求更新的代码对应的功能, 你会看不到更新的效果, 你必须得重新加载你的PHP (使用 <code>kill -SIGUSR2</code> 强制重新加载) . </p>
<p>这个设定是不是有些蛋疼, 但是我强烈建议你在生产环境中使用, 为啥？因为当你在更新服务器代码的时候, 如果代码较多, 更新操作是有些延迟的, 在这个延迟的过程中必然出现老代码和新代码混合的情况, 这个时候对用户请求的处理必然存在不确定性. </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">opcache.max_accelerated_files</span><br></pre></td></tr></table></figure>

<p>这个选项用于控制内存中最多可以缓存多少个 <code>PHP</code> 文件. 这个选项必须得设置得足够大, 大于你的项目中的所有 <code>PHP</code> 文件的总和. 我的代码库大概有 6000 个 <code>PHP</code> 文件, 所以我把这个值设置为一个素数 7963 (译注: 不知道这哥们为什么要设置这个数, 7963 也不是大于 6000 的最小素数) . </p>
<p>你可以运行 <code>find . -type f -print | grep php | wc -l</code> 这个命令来快速计算你的代码库中的PHP文件数. </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">opcache.memory_consumption</span><br></pre></td></tr></table></figure>

<p>这个选项的默认值为 <code>64MB</code>, 我把它设置为 <code>192MB</code>, 因为我的代码很大. 你可以通过调用 <code>opcachegetstatus()</code> 来获取 <code>Opcache</code> 使用的内存的总量, 如果这个值很大, 你可以把这个选项设置得更大一些. </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">opcache.interned_strings_buffer</span><br></pre></td></tr></table></figure>

<p>这是一个很有用的选项, 但是似乎完全没有文档说明. <code>PHP</code> 使用了一种叫做字符串驻留 (<code>string interning</code>) 的技术来改善性能. 例如, 如果你在代码中使用了 1000 次字符串 <code>foobar</code>, 在 <code>PHP</code> 内部只会在第一使用这个字符串的时候分配一个不可变的内存区域来存储这个字符串, 其他的 999 次使用都会直接指向这个内存区域. 这个选项则会把这个特性提升一个层次——默认情况下这个不可变的内存区域只会存在于单个 <code>php-fpm</code> 的进程中, 如果设置了这个选项, 那么它将会在所有的 <code>php-fpm</code> 进程中共享. 在比较大的应用中, 这可以非常有效地节约内存, 提高应用的性能. </p>
<p>这个选项的值是以兆字节 (<code>megabytes</code>) 作为单位, 如果把它设置为 16, 则表示 <code>16MB</code>, 默认是 <code>4MB</code>, 这是一个比较低的值. </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">opcache.fast_shutdown</span><br></pre></td></tr></table></figure>

<p>另外一个很有用但也没有文档说明的选项. 从字面上理解就是 <strong>允许更快速关闭</strong>. 它的作用是在单个请求结束时提供一种更快速的机制来调用代码中的析构器, 从而加快 <code>PHP</code> 的响应速度和 <code>PHP</code> 进程资源的回收速度, 这样应用程序可以更快速地响应下一个请求. 把它设置为 1 就可以使用这个机制了. </p>
<p>最终我们对于 <code>Opcache</code> 在 <code>php.ini</code> 的设置如下: </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">opcache.revalidate_freq=<span class="number">0</span></span><br><span class="line">opcache.validate_timestamps=<span class="number">0</span> ;在开发环境可以把这一行注释掉</span><br><span class="line">opcache.max_accelerated_files=<span class="number">7963</span></span><br><span class="line">opcache.memory_consumption=<span class="number">192</span></span><br><span class="line">opcache.interned_strings_buffer=<span class="number">16</span></span><br><span class="line">opcache.fast_shutdown=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="https://www.scalingphpbook.com/blog/2014/02/14/best-zend-opcache-settings.html">Best Zend OpCache Settings/Tuning/Config</a></li>
<li><a href="https://juejin.cn/post/6844904050211684366">PHP Opcache 注意事项以及调优</a></li>
</ul>
]]></content>
      <tags>
        <tag>Php</tag>
      </tags>
  </entry>
  <entry>
    <title>MAC 环境下构建 PHP 自动化环境工具</title>
    <url>/posts/php-link-tool.html</url>
    <content><![CDATA[<p>在 <code>Docker</code> 还没有在国内流行起来的早期开发中, 关于 <code>PHP</code> 本地开发环境的搭建, 我尝试过使用本机安装 <code>Nginx</code> + <code>PHP</code>, 也尝试过使用虚拟机的方式. 各有各的优缺点. </p>
<p>因为我们之前生产环境使用的是 <code>Docker</code> 进行部署, 所以为了模拟生产环境需要使用线上的 <code>Docker</code> 镜像; 但是每个项目都写一个给本地开发环境使用的 <code>docker-compose.yml</code> 我又觉得很麻烦, 就花了一点时间写了一个自动化工具</p>
<p>之前有尝试过 <a href="https://laravel.com/docs/8.x/valet">Laravel Valet</a> 虽然它的实现对现在来说, 已经有些老旧了, 但是它的运行方式我很喜欢, 所以我打算按照它的方式来写这个自动化工具</p>
<blockquote>
<p>项目地址: <a href="https://gogs.ijunj.com/common/php-link-tool">https://gogs.ijunj.com/common/php-link-tool</a></p>
</blockquote>
<span id="more"></span>

<h4 id="构建自动化工具脚本"><a href="#构建自动化工具脚本" class="headerlink" title="构建自动化工具脚本"></a>构建自动化工具脚本</h4><p>本来这个脚本打算用 <code>Go</code> 去实现, 但是写到一半又觉得有点麻烦且过于繁琐, 都是一些 <code>Shell</code> 命令, 有点脱裤子放屁的感觉, 还不如直接用 <code>Shell</code> 来实现</p>
<h5 id="工具脚本-php-link-tool-sh"><a href="#工具脚本-php-link-tool-sh" class="headerlink" title="工具脚本 php-link-tool.sh"></a>工具脚本 <code>php-link-tool.sh</code></h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"></span><br><span class="line">helpTips=<span class="string">&quot;Usage: php-link-tool [options] [path]</span></span><br><span class="line"><span class="string">       php-link-tool link   [path] Link to a new project</span></span><br><span class="line"><span class="string">       php-link-tool unlink [name] Unlink a project&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$helpTips</span>&quot;</span> &amp;&amp; <span class="built_in">exit</span> 1; <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> != <span class="string">&quot;link&quot;</span> ] &amp;&amp; [ <span class="string">&quot;<span class="variable">$1</span>&quot;</span> != <span class="string">&quot;unlink&quot;</span> ]; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$helpTips</span>&quot;</span> &amp;&amp; <span class="built_in">exit</span> 1; <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">  <span class="string">&quot;link&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(docker images -q base/php-openresty:2.0.1)</span>&quot;</span> = <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Run install.sh to initialize the environment&quot;</span> &amp;&amp; <span class="built_in">exit</span> 1;</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$#</span> -gt 1 ]; <span class="keyword">then</span> path=<span class="variable">$2</span>; <span class="keyword">else</span> path=$(<span class="built_in">pwd</span>); <span class="keyword">fi</span></span><br><span class="line">    containerName=<span class="variable">$&#123;path##*/&#125;</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(docker ps -aq -f name=<span class="string">&quot;<span class="variable">$containerName</span>&quot;</span>)</span>&quot;</span> != <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(docker inspect --format &#x27;&#123;&#123;.State.Running&#125;&#125;&#x27; <span class="string">&quot;<span class="variable">$containerName</span>&quot;</span>)</span>&quot;</span> = <span class="string">&quot;false&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">            docker rm <span class="string">&quot;<span class="variable">$containerName</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;The <span class="variable">$containerName</span> project is already running, To disable this function, run the php-link-tool unlink &lt;name&gt; command&quot;</span> &amp;&amp; <span class="built_in">exit</span> 1</span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">    port=$(python -c <span class="string">&#x27;import socket; s=socket.socket(); s.bind((&quot;&quot;, 0)); print(s.getsockname()[1]); s.close()&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    docker run --name=<span class="string">&quot;<span class="variable">$containerName</span>&quot;</span> -d -p <span class="string">&quot;<span class="variable">$port</span>&quot;</span>:80 -v <span class="string">&quot;<span class="variable">$path</span>&quot;</span>:/www base/php-openresty:2.0.1</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;127.0.0.1  <span class="variable">$containerName</span>.local&quot;</span> | sudo tee -a /etc/hosts &gt; /dev/null</span><br><span class="line">    sudo touch /private/etc/apache2/vhosts/<span class="string">&quot;<span class="variable">$containerName</span>&quot;</span>.conf</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;&lt;VirtualHost *:80&gt;</span></span><br><span class="line"><span class="string">  ServerName <span class="variable">$containerName</span>.local</span></span><br><span class="line"><span class="string">  ProxyPass / http://127.0.0.1:<span class="variable">$port</span>/</span></span><br><span class="line"><span class="string">  ProxyPassReverse / http://127.0.0.1:<span class="variable">$port</span>/</span></span><br><span class="line"><span class="string">&lt;/VirtualHost&gt;&quot;</span> | sudo tee -a /private/etc/apache2/vhosts/<span class="string">&quot;<span class="variable">$containerName</span>&quot;</span>.conf &gt; /dev/null</span><br><span class="line"></span><br><span class="line">    sudo apachectl restart</span><br><span class="line">  ;;</span><br><span class="line">  <span class="string">&quot;unlink&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$#</span> -gt 1 ]; <span class="keyword">then</span> containerName=<span class="variable">$2</span>; <span class="keyword">else</span> path=$(<span class="built_in">pwd</span>); containerName=<span class="variable">$&#123;path##*/&#125;</span>; <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(docker ps -aq -f name=<span class="string">&quot;<span class="variable">$containerName</span>&quot;</span>)</span>&quot;</span> != <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        docker stop <span class="string">&quot;<span class="variable">$containerName</span>&quot;</span> &amp;&amp; docker rm <span class="string">&quot;<span class="variable">$containerName</span>&quot;</span></span><br><span class="line">        sudo sed -i <span class="string">&#x27;&#x27;</span> -e <span class="string">&quot;s/^127.*<span class="variable">$containerName</span>.local$//g&quot;</span> /etc/hosts</span><br><span class="line">        vhostFile=<span class="string">&quot;/private/etc/apache2/vhosts/<span class="variable">$containerName</span>.conf&quot;</span></span><br><span class="line">        <span class="keyword">if</span> [ -f <span class="string">&quot;<span class="variable">$vhostFile</span>&quot;</span> ]; <span class="keyword">then</span> sudo rm -f <span class="string">&quot;<span class="variable">$vhostFile</span>&quot;</span>; <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<h5 id="环境初始化脚本-install-sh"><a href="#环境初始化脚本-install-sh" class="headerlink" title="环境初始化脚本 install.sh"></a>环境初始化脚本 <code>install.sh</code></h5><p>因为自动化脚本对 <code>Apache</code> 有依赖, 只有一个工具脚本还不够, 需要一个脚本去初始化 <code>Mac</code> 自带的 <code>Apache</code>; 这里我还把需要使用到的 <code>Docker</code> 镜像初始化也放到了里面</p>
<blockquote>
<p>有跟朋友聊起这个工具, 他提供了一个全平台的解决方案, 在本地拉起一个 80 端口的 <code>Nginx</code>, 然后通过这个 <code>Nginx</code> 转发到其他项目的端口上; 这样就可以和宿主机完全隔离开, 后面如果有时间的话, 会有这一部分优化</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -o errexit</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="subst">$(docker images -q base/php-openresty:2.0.1)</span>&quot;</span> = <span class="string">&quot;&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  docker build -t base/php-openresty:2.0.1 --no-cache .</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">sudo mkdir -p /private/etc/apache2/vhosts</span><br><span class="line">sudo cp /private/etc/apache2/httpd.conf /private/etc/apache2/httpd.conf.bak</span><br><span class="line"></span><br><span class="line">sudo sed -i <span class="string">&#x27;&#x27;</span> -e <span class="string">&#x27;s/^#\(LoadModule.*mod_proxy_http.so\)$/\1/g&#x27;</span> /private/etc/apache2/httpd.conf</span><br><span class="line">sudo sed -i <span class="string">&#x27;&#x27;</span> -e <span class="string">&#x27;s/^#\(LoadModule.*mod_proxy.so\)$/\1/g&#x27;</span> /private/etc/apache2/httpd.conf</span><br><span class="line">sudo sed -i <span class="string">&#x27;&#x27;</span> -e <span class="string">&#x27;s/^#\(LoadModule.*mod_ssl.so\)$/\1/g&#x27;</span> /private/etc/apache2/httpd.conf</span><br><span class="line">sudo sed -i <span class="string">&#x27;&#x27;</span> -e <span class="string">&#x27;s/^#\(LoadModule.*mod_vhost_alias.so\)$/\1/g&#x27;</span> /private/etc/apache2/httpd.conf</span><br><span class="line">sudo sed -i <span class="string">&#x27;&#x27;</span> -e <span class="string">&#x27;s/^#\(Include.*vhosts.conf\)$/\1/g&#x27;</span> /private/etc/apache2/httpd.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Include /private/etc/apache2/vhosts/*.conf&#x27;</span> | sudo tee -a /private/etc/apache2/httpd.conf &gt; /dev/null</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;SSLProxyEngine on&#x27;</span> | sudo tee -a /private/etc/apache2/httpd.conf &gt; /dev/null</span><br><span class="line"></span><br><span class="line">sudo apachectl restart</span><br><span class="line">cp php-link-tool.sh /usr/<span class="built_in">local</span>/bin/php-link-tool</span><br></pre></td></tr></table></figure>

<h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一个新的 Lravel 项目</span></span><br><span class="line">composer create-project --prefer-dist laravel/laravel php-test <span class="string">&quot;5.*&quot;</span></span><br></pre></td></tr></table></figure>

<p>进入到项目文件夹执行 <code>php-link-tool link</code> 然后通过 <code>docker ps</code> 查看所有容器, 就能看到一个新的 <code>php-test</code> 容器在运行, 通过浏览器请求 <code>http://php-test.local</code> 也是可以正常请求的</p>
<p><img src="/images/php-link-tool-link-example.png" alt="image"><br><img src="/images/php-link-tool-link-browsers.png" alt="image"></p>
<p>然后通过 <code>php-link-tool unlink</code> 就能移除这个项目</p>
<p><img src="/images/php-link-tool-unlink-exmple.png" alt="image"></p>
]]></content>
      <tags>
        <tag>Php</tag>
        <tag>Mac</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>关于产品与开发之间关系的一些吐槽和想法</title>
    <url>/posts/product-and-developers-relation.html</url>
    <content><![CDATA[<p>Any technical argument is necessary, even if you put forward a wrong idea, but this argument should stop at technology</p>
<p>今天中午干完饭, 去楼道抽烟, 看到我们产品一个 29 快 30 的大小伙子在那里, <strong>极度郁闷</strong>, 卡卡的一根接一根的在那抽烟, 遍地烟头 (估计得抽了有半包). </p>
<p>事情起因是因为今天我们的后台被别人搞了, 衍生出觉得 <code>App</code> 也不太安全, 虽然我们本身是有接口加密的. 但是加密的算法采用的是 <code>RC4</code> 对称加密, 所以密钥是暴露在客户端的, 在拿到我们的包之后可以通过反编译的方式, 获取到加密的密钥</p>
<p><code>iOS</code> 端针对这个问题, 把整个网络请求的库打包成了一个静态库加载到项目里, 但是这种做法遭到了 <code>Android</code> 端的极力反对 (主要是 <code>Android</code> 端负责人的极力反对). 按照他们的说法是, 安卓把整个网络请求库打包成一个静态库不是很方便</p>
<span id="more"></span>

<p><code>Android</code> 他们的意思是之前上加密他们就不是很赞同, 因为如果有人想搞我们的话, 完全不需要我们的密钥, 也不会通过反编的方式去破解我们包, 基于这一点, 他们觉得这个将整个网络请求库打包的需求成本高、收益小, 做起来很没有必要.</p>
<blockquote>
<p>对于安卓说的就算上了加密, 或者他们把整个网络请求哭打包成静态库, 还是可以通过反编译或者其他方式攻击我们的服务器, 这一点我是赞同的.<br>但是我并不认为这样做没有意义, 对于互联网项目来说, 没有绝对的安全, 我们做的所有跟安全有关的措施, 都只是在增加别人搞我们的成本而已</p>
</blockquote>
<p>安卓拒绝的理由, 产品理解起来就是: 这个需求太麻烦了, 我们 (PS: 安卓) 不想做而不是不能做</p>
<p>那这矛盾就出来了嘛. 产品和安卓负责人两个人在会议室吵了一整个上午. 最后安卓那边也还是不做, 给产品整郁闷了.</p>
<p>在绝大多数的互联网公司里, 开发和产品之间的关系都并不算友好, 开发在接到一个需求之后, 需要考虑东西有很多, 例如: 这个功能的扩展性、开发成本、 数据库怎么设计等; 但是有的时候这个需求其实只是产品在试错, 如果产品提出来的需求只是在试错, 试错的需求就需要经常改; </p>
<p>改可以啊, 至少也得说出来为啥改是吧! 但是有的时候产品也只是一个传话工具, 老板说要改, 为啥? 不知道!! emmmmmm…. 这个就很尴尬; 或者说, 产品就是觉得不对, 哪里不对又说不上来, emmmmmm…, 对于开发来说就是脑壳疼</p>
<p>碰到这种类似的问题, 我觉得不妨换个角度思考一下, 站在产品的位置上,去考虑一下这个问题. 就拿这次提到的加密强化的这个需求来讲; </p>
<p>这应该是一个产品应该关心的问题吗? 我个人觉得不是, 这个问题是应该在产品提出来之前就应该处理好的, 开发在发现一个漏洞的时候, 或者明知道存在这个漏洞的情况下, 应该第一时间去想办法去修补这个漏洞, 而不是等产品提出这个需求; </p>
<p>产品不是技术, 绝大部份产品也不会技术, 他们没有办法像开发一样去发现一些漏洞.</p>
<p>还有试错这个问题, 也站在产品的位置上, 去看待一下, 一个功能, 需求来源无非就是那么几种: 借鉴竞品好的想法、产品觉得不错的想法、 上面压下来的需求</p>
<p>不管需求的来源是哪一种, 产品怎么会知道这个功能, 是否能对项目产生一个正向的增长? 他肯定不知道啊. 所以在我看来产品的每一个需求都是在试错, 如果这个功能对项目产生了正向的增长, 那这个功能就是成功的; 反之, 这个功能对项目产生了负向的影响, 或者说这个功能没有达到产品的预期目标, 那么这个功能就需要改, 或是直接移除</p>
<p>在我的职业生涯里, 我碰到的所有的开发都和和产品互怼过, 无关职位、年龄和岗位, 只要他是个技术就一定会怼产品. 如果你发现一个开发还没有怼过产品, 他一定是个新人, 对业务还不了解! </p>
<p>作为服务端的负责人, 我鼓励我的组员对技术 (我认为 <strong>产品是不会技术的技术</strong>) 发起讨论. 可以争论, 甚至可以吵, 但是这种争论不应该掺杂个人感情, 虽然这很难. </p>
<p>我个人比较推崇一句话: “任何技术上的争论都是有必要的, 哪怕你提出的是一个错误的想法, 但是这个争论应该止于技术”, 这, 也是我在跟别人争论 <strong>过后和之前</strong> 最常想的一句话</p>
]]></content>
  </entry>
  <entry>
    <title>Reids 的三种集群模式搭建和入门</title>
    <url>/posts/redis-cluster.html</url>
    <content><![CDATA[<p>在开发中 <code>Reids</code> 是我们经常使用到的 <code>NoSql</code> 之一, 在生产环境中, 在某些特定的情况下 (例如: 给开发人员使用的只读库) 需要引入 <code>Redis</code> 的集群方案. <code>Redis</code> 支持三种集群方案: <strong>主从复制模式</strong>、<strong>Sentinel (哨兵) 模式</strong>、<strong>Cluster 模式</strong></p>
<p><img src="/images/redis-cluster-desc-page.png" alt="image"></p>
<span id="more"></span>

<blockquote>
<p>准备三台虚拟机用于模拟 <code>Redis</code> 集群环境, 系统环境: <code>Ubuntu Server 18.04</code></p>
</blockquote>
<p><img src="/images/redis-cluster-vbox.png" alt="image"></p>
<h4 id="安装-Redis-Server-和-Redis-Cli"><a href="#安装-Redis-Server-和-Redis-Cli" class="headerlink" title="安装 Redis Server 和 Redis Cli"></a>安装 <code>Redis Server</code> 和 <code>Redis Cli</code></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># https://timelate.com/archives/install-redis-on-ubuntu.html</span></span><br><span class="line">sudo apt-get install software-properties-common -y</span><br><span class="line">sudo add-apt-repository ppa:chris-lea/redis-server -y</span><br><span class="line">sudo apt-get update &amp;&amp; sudo apt-get install redis-server redis-tools -y</span><br><span class="line">sudo redis-server -v</span><br></pre></td></tr></table></figure>

<h4 id="主从复制模式"><a href="#主从复制模式" class="headerlink" title="主从复制模式"></a>主从复制模式</h4><p>主从复制模式下包含一台主数据库 (<code>master</code>) 和最少一台从数据库 <code>slave</code>. <code>slave</code> 启动后, 向 <code>master</code> 发送 <code>SYNC</code> 命令, <code>master</code> 接收到 <code>SYNC</code> 命令后通过 <code>bgsave</code> 保存快照 (<code>RDB</code> 持久化), 并使用缓冲区记录保存快照这段时间内执行的写命令; <code>master</code> 将保存的快找文件发送给 <code>slave</code>, 并继续执行执行的写明了; <code>slave</code> 接收到快照文件后, 加载快照文件并载入数据; <code>master</code> 在快照发送完成后开始向 <code>slave</code> 发送缓冲期的命令, <code>slave</code> 接收命令并执行, 完成复制初始化. 此后 <code>master</code> 每次执行一个写命令都会同步发送给 <code>slave</code>, 保持 <code>master</code> 和 <code>slave</code> 之间的数据一致性. </p>
<p>修改 <code>master</code> 的配置文件 <code>sudo vim /etc/redis/redis.conf</code> 并重启服务 <code>sudo systemctl restart redis-server</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 0.0.0.0 <span class="comment"># 绑定监听的IP 0.0.0.0允许所有IP访问</span></span><br><span class="line">requirepass 123456 <span class="comment"># 密码</span></span><br></pre></td></tr></table></figure>

<p>修改 <code>slave</code> 的配置文件 <code>sudo vim /etc/redis/redis.conf</code> 并重启服务 <code>sudo systemctl restart redis-server</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 0.0.0.0 <span class="comment"># 绑定监听的IP 0.0.0.0允许所有IP访问</span></span><br><span class="line">requirepass 123456 <span class="comment"># 密码</span></span><br><span class="line">replicaof 192.168.56.102 6379 <span class="comment"># master 的 IP 和端口</span></span><br><span class="line">masterauth 123456 <span class="comment"># master 密码</span></span><br></pre></td></tr></table></figure>

<p><code>master</code> 和 <code>slave</code> 都配置后之后, 进入 <code>master</code> 写入一条数据, 立即访问 <code>slave</code> 查看, 或通过 <code>info replication</code> 命令也可以看到当前机器的主从状态</p>
<p><img src="/images/redis-master-slave-example.png" alt="image"></p>
<blockquote>
<p>主从模式下 <code>master</code> 和 <code>slave</code> 之间的同步是以非阻塞的形式进行的, 同步期间, 客户端仍然可以提交查询和更新请求<br>主从模式不具备自动容错和恢复功能, <code>master</code> 或 <code>slave</code> 宕机都有可能导致客户端请求失败; 且难以支持在线扩容, <code>Redis</code> 的容量受限于单机配置</p>
</blockquote>
<h4 id="Sentinel-哨兵-模式"><a href="#Sentinel-哨兵-模式" class="headerlink" title="Sentinel (哨兵) 模式"></a><code>Sentinel</code> (哨兵) 模式</h4><p>哨兵模式基于主从复制模式, 只是引入了哨兵来监控与自动处理故障, 一旦发现问题能做出相应的应对处理, 其功能包括:</p>
<blockquote>
<p>注意: 因为哨兵模式 <strong>基于主从模式</strong>, 所以开启哨兵模式之前, 需要 <strong>先开启主从模式</strong></p>
</blockquote>
<ul>
<li>监控 <code>master</code>、<code>slave</code> 是否正常运行</li>
<li>当 <code>master</code> 出现故障时, 能自动将一个 <code>slave</code> 转换为 <code>master</code></li>
<li>多个哨兵可以监控同一个 <code>Redis</code>, 哨兵之间也会自动监控</li>
</ul>
<p>当哨兵与 <code>master</code> 建立连接后, 会定期  向 <code>master</code> 和 <code>slave</code> 发送 <code>PING</code> 命令 (1s一次); 如果被 <code>PING</code> 的数据库或节点超时未回复, 哨兵会认为其主观下线, 如果下线的是 <code>master</code>, 哨兵会向其他哨兵发送命令询问是否也认为该 <code>master</code> 主观下线, 当一定数量的哨兵都认为该 <code>master</code> 主管下线后, 哨兵会认为该 <code>master</code> 已经客观下线</p>
<p>当哨兵认为 <code>master</code> 客观下线时, 故障恢复的操作需要由选举的领头哨兵来执行, 选举通过 <code>Raft</code> 算法: 即发现 <code>master</code> 的哨兵节点向每个哨兵发送请求, 要求对方选自己为领头哨兵, 如果目标哨兵节点没有选过其他人, 则会同意当前请求; 如果超过一半的哨兵同意, 则发送请求的哨兵节点当选为领头哨兵; 如果多个哨兵节点同时参选, 可能存在一轮投票后无竞选者胜出, 此时每个参选的节点等待一个随机时间后再次发起参选请求, 直到选出领头哨兵</p>
<p>选举出 <strong>领头哨兵</strong> 后, 会从下线的 <code>master</code> 的从库中挑选出一个当做新的 <code>master </code>; 挑出需要继任的 <code>slave</code> 后, <strong>领头哨兵</strong> 向该数据库发送命令使其升格 <code>为master</code>, 然后再向其他 <code>slave</code> 发送命令接受新的 <code>master</code>, 最后更新数据. 将已经停止的旧的 <code>master</code> 更新为新的 <code>master</code> 的从库, 使其恢复服务后以 <code>slave</code> 的身份继续运行</p>
<p>为了模拟较为真实的生产环境, 多加两台虚拟机作为哨兵使用:</p>
<p><img src="/images/redis-cluster-vbox-sentinel.png" alt="image"></p>
<p>安装 <code>redis-sentinel</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install redis-sentinel -y</span><br></pre></td></tr></table></figure>

<p>修改两台 <code>sentinel</code> 机器配置: <code>sudo vim /etc/redis/sentinel.conf</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bind 0.0.0.0 # 绑定监听的IP 0.0.0.0允许所有IP访问</span><br><span class="line">sentinel monitor mymaster 192.168.56.102 6379 1 # mymaster 定义一个 master 数据库的名称，后面是 master 的ip, port, 1 表示至少需要一个 Sentinel 进程同意才能将 master 判断为失效, 如果不满足这个条件, 则自动故障转移（failover）不会执行</span><br><span class="line">sentinel auth-pass mymaster 123456 # master 的密码</span><br><span class="line"></span><br><span class="line">sentinel down-after-milliseconds mymaster 5000 # 5s 未回复 PING, 则认为 master 主观下线，默认为 30s</span><br><span class="line">sentinel parallel-syncs mymaster 2  # 指定在执行故障转移时, 最多可以有多少个 slave 实例在同步新的 master 实例, 在 slave 实例较多的情况下这个数字越小, 同步的时间越长, 完成故障转移所需的时间就越长</span><br><span class="line">sentinel failover-timeout mymaster 300000 # 如果在该时间（ms）内未能完成故障转移操作, 则认为故障转移失败, 生产环境需要根据数据量设置该值</span><br></pre></td></tr></table></figure>

<p>重启 <code>redis-sentinel</code> 服务之后, 可以通过 <code>redis-cli -p 26379</code> 连接到节点查看状态</p>
<p><img src="/images/redis-sentinel-status.png" alt="image"></p>
<p>在 <code>master</code> 执行以下命令关闭 <code>redis-server</code> 模拟 <code>master</code> 挂掉的场景, 然后进入 <code>slave</code> 中执行 <code>info replication</code> 查看两台 <code>slave</code> 的状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl stop redis-server</span><br></pre></td></tr></table></figure>

<p><img src="/images/killed-redis-slaves-status.png" alt="image"><br><img src="/images/killed-redis-sentinels-status.png" alt="image"></p>
<p>杀死 <code>master</code> 后, 可以查看 <code>slave</code> 的状态可以看到, <code>slave2</code> 这台机器已经继任成了主库, 两台 <code>sentinel</code> 的对应的主库已经从 <code>192.168.56.102</code> 变成了 <code>192.168.56.105</code></p>
<blockquote>
<p>哨兵模式 <strong>基于主从模式</strong>, 但是相较于主从模式在 <code>master</code> 意外宕机后, 可以自动切换, 系统可用性更高<br>但是, 存在和组从模式存在一样的问题: 难以在线扩展、<code>Redis</code> 容量受单机限制; 并且, 需要额外的资源来启动 <code>Sentinel</code> 服务, 实现相对于复杂</p>
</blockquote>
<h4 id="Cluster-模式"><a href="#Cluster-模式" class="headerlink" title="Cluster 模式"></a><code>Cluster</code> 模式</h4><p>哨兵模式解决了主从复制不能自动故障转移, 达不到高可用的问题, 但还是存在难以在线扩容, <code>Redis</code> 容量受限于单机配置的问题. <code>Cluster</code> 模式实现了 <code>Redis</code> 的 分布式存储, <strong>即每台节点存储不同的内容</strong>, 来解决在线扩容的问题</p>
<p><code>Cluster</code> 采用无中心结构, 所有的 <code>Redis</code> 节点彼此互联( <code>PING</code> 机制), 节点是否失效是通过集群中超过半数的节点检测失效时才生效. 客户端与 <code>Redis</code> 节点直连, 不需要中间代理层. 客户端不需要连接集群所有节点, <strong>只需要连接集群中任何一个可用节点</strong></p>
<blockquote>
<p><code>Cluster</code> 模式采用分布式存储, 在每个节点上, 都有一个插槽 (<code>slot</code>), 取值范围为 0-16383. 当存取 <code>key</code> 时, 节点会根据 <code>CRC16</code> 的算法得出一个结果, 然后把结果对 16384 求余, 求得的余被用来确定对应的数据存储在哪个节点中, 集群中的每个节点都存储了一份类似路由表的东西, 描述每个节点所拥有的 <code>Slots</code>; 当用户请求一个不在请求节点的 <code>key</code> 时, 它可以根据这个路由表找到正确的服务节点, 告知用户正确的服务节点</p>
</blockquote>
<blockquote>
<p><code>Cluster</code> 模式集群节点最小配置 6 个节点(3 主 3 从, 因为需要半数以上), 其中主节点提供读写操作, 从节点作为备用节点, 不提供请求, 只作为故障转移使用。</p>
</blockquote>
<p>修改所有机器的配置文件 <code>sudo vim /etc/redis/redis.conf</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bind</span> 0.0.0.0 <span class="comment"># 绑定监听的IP 0.0.0.0允许所有IP访问</span></span><br><span class="line">requirepass 123456 <span class="comment"># 密码</span></span><br><span class="line">cluster-enabled yes <span class="comment"># 开启集群模式 </span></span><br><span class="line">masterauth 123456 <span class="comment"># 如果设置了密码，需要指定master密码</span></span><br><span class="line">cluster-config-file nodes-xxx.conf <span class="comment"># 集群的配置文件</span></span><br><span class="line">cluster-node-timeout 15000 <span class="comment"># 请求超时 默认15秒，可自行设置</span></span><br></pre></td></tr></table></figure>

<p>修改完所有机器的配置文件后, 使用 <code>redis-cli</code> 启动集群 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ redis-cli --cluster create --cluster-replicas 1 192.168.56.102:6379 192.168.56.103:6379 192.168.56.105:6379 192.168.56.106:6379 192.168.56.107:6379 192.168.56.108:6379 -a 123456</span><br></pre></td></tr></table></figure>












]]></content>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang 实现的非对称加密</title>
    <url>/posts/rsa-asymmetric-encryption.html</url>
    <content><![CDATA[<p>对称加密作为最快速、最简单的加密方式, 所以被广泛的使用在很多加密协议的核心中. 但是对称加密也有一个致命的弱点, 那就是对称加密算法在加密和解密是需要使用到同一个 <strong>密钥</strong>; 当 <code>A</code> 和 <code>B</code> 两个人在需要进行加密数据的传输时, 如果他们使用的是对称加密算法, 那么必须有一端将 <strong>密钥</strong> 发送给另外一端. 在不安全的网络传输中这一点就是相当危险! <strong>密钥</strong> 一旦被窃或拦截, 那么之前所做的加密就相当于已经失效.</p>
<p>1976 年, 美国学者 <code>Dime</code> 和 <code>Henman</code> 为了解决信息公开传送和秘钥管理问题, 提出一种新的密钥交换协议, 允许在不安全媒体上的通信双方交换数据, 安全的达成一致的密钥, 这种密钥交换协议就被称为 “**公开密钥密码学 (Public-key cryptography)**”. 相对于 <strong>对称加密算法</strong> 这种方法也被叫做 <strong>非对称加密算法</strong>.</p>
<p>非对称加密算法之所以可以规避对称加密的致命缺点, 就是因为非对称加密使用的是 <strong>一对</strong> 密钥, 而不是像对称加密一样使用 <strong>一个</strong> 密钥; 非对称加密的秘钥分为两个: 一个是 <strong>公钥</strong> (<code>public key</code>); 另一个则是 <strong>私钥</strong> (<code>private key</code>). <strong>私钥只由安全的一方保管, 不能外泄</strong>; 公钥则可以发给任何请求它的人. 非对称加密算法在加密时可以使用两个密钥中的任何一个, 但是在解密时则需要另外一个密钥才能解密. 比如: 使用公钥加密就需要私钥才能解密、使用私钥加密就需要公钥才能解密.</p>
<span id="more"></span>

<h4 id="RSA-非对称加密算法"><a href="#RSA-非对称加密算法" class="headerlink" title="RSA 非对称加密算法"></a><code>RSA</code> 非对称加密算法</h4><p>非对称加密的主要算法有: <code>RSA</code>、<code>Elgamal</code>、背包算法、<code>Rabin</code>、<code>D-H</code>、<code>ECC</code> (<strong>椭圆曲线加密算法</strong>), 其中 <code>RSA</code> 是被最广泛使用的一种非对称加密算法. <code>RSA</code> 是 1977 年由 <a href="https://zh.wikipedia.org/wiki/%E7%BD%97%E7%BA%B3%E5%BE%B7%C2%B7%E6%9D%8E%E7%BB%B4%E6%96%AF%E7%89%B9">Ronald Linn Rivest</a>、<a href="https://zh.wikipedia.org/wiki/%E9%98%BF%E8%BF%AA%C2%B7%E8%90%A8%E8%8E%AB%E5%B0%94">Adi Shamir</a>、<a href="https://zh.wikipedia.org/wiki/%E4%BC%A6%E7%BA%B3%E5%BE%B7%C2%B7%E9%98%BF%E5%BE%B7%E6%9B%BC">Leonard Max Adleman</a> 三个人一起提出, <code>RSA</code> 就是他们三个人的姓氏首字母拼在一起组成的</p>
<p><code>RSA</code> 跟对称加密比较, 更加复杂, 且更加消耗资源. 但是相对来说它的灵活性也更高; 到目前为止, 世界上还没有任何可靠的能够攻击 <code>RSA</code> 算法的方式. 只要其密钥长度足够长, 用 <code>RSA</code> 加密的数据实际上是不能破解的</p>
<h5 id="ASN-1"><a href="#ASN-1" class="headerlink" title="ASN.1"></a><code>ASN.1</code></h5><p>在电信和计算机网络领域, <code>ASN.1</code> (<code>Abstract Syntax Notation One</code>) 是一套标准, 是描述数据的表示、编码、传输、解码的灵活的记法. 它提供了一套正式、无歧义和精确的规则以描述独立于特定计算机硬件的对象结构. 标准的 <code>ASN.1</code> 编码规则有: 基本编码规则 (<code>Basic Encoding Rules</code>) 简称 <code>BER</code>、规范编码规则 (<code>Canonical Encoding Rules</code>) 简称 <code>CER</code>、唯一编码规则 (<code>Distinguished Encoding Rules</code>) 简称 <code>DER</code>、压缩编码规则 (<code>Packed Encoding Rules</code>) 简称 <code>PER</code> 和 <code>XML</code> 编码规则 (<code>XML Encoding Rules</code>) 简称 <code>XER</code>. <a href="https://zh.wikipedia.org/wiki/ASN.1">参考资料</a></p>
<h5 id="X-509-数字证书标准"><a href="#X-509-数字证书标准" class="headerlink" title="X.509 数字证书标准"></a><code>X.509</code> 数字证书标准</h5><p><code>X.509</code> 是密码学里公钥证书的格式标准. <code>X.509</code> 证书已应用在包括 <code>TLS/SSL</code> 在内的众多网络协议里, 同时它也用在很多非在线应用场景里, 比如电子签名服务. <code>X.509</code> 证书里含有公钥、身份信息 (比如网络主机名，组织的名称或个体名称等) 和签名信息 (可以是证书签发机构CA的签名，也可以是自签名). 对于一份经由可信的证书签发机构签名或者可以通过其它方式验证的证书, 证书的拥有者就可以用证书及相应的私钥来创建安全的通信, 对文档进行数字签名. <code>X.509</code> 证书的结构是由 <code>ASN.1</code> 进行描述, 并使用 <code>ASN.1 DER</code> 编码规则编码</p>
<h6 id="golang-实现-RSA-密钥对生成"><a href="#golang-实现-RSA-密钥对生成" class="headerlink" title="golang 实现 RSA 密钥对生成"></a><code>golang</code> 实现 <code>RSA</code> 密钥对生成</h6><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/rsa&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/pem&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generatePrinAndPubKeys</span><span class="params">(size <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	pri, err := rsa.GenerateKey(rand.Reader, size)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;generate rsa keys fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	derTx := x509.MarshalPKCS1PrivateKey(pri)</span><br><span class="line">	block := pem.Block&#123;Type: <span class="string">&quot;RSA PRIVATE KEY&quot;</span>, Bytes: derTx&#125;</span><br><span class="line">	file, err := os.Create(<span class="string">&quot;private.pem&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;create file fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := pem.Encode(file, &amp;block); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;private key input file fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	derstream, err := x509.MarshalPKIXPublicKey(&amp;pri.PublicKey)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;marshal public key fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line">	block = pem.Block&#123;Type: <span class="string">&quot;RSA PUBLIC KEY&quot;</span>, Bytes: derstream&#125;</span><br><span class="line">	pubFile, err := os.Create(<span class="string">&quot;public.pem&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;create file fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> pubFile.Close()</span><br><span class="line">	<span class="keyword">if</span> err := pem.Encode(pubFile, &amp;block); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;private key input file fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	generatePrinAndPubKeys(<span class="number">1024</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="golang-实现-RSA-加解密"><a href="#golang-实现-RSA-加解密" class="headerlink" title="golang 实现 RSA 加解密"></a><code>golang</code> 实现 <code>RSA</code> 加解密</h6><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/rsa&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/base64&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/pem&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">publicKeyEncrypt</span><span class="params">(plainText []<span class="keyword">byte</span>, keyFile <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	content, err := ioutil.ReadFile(keyFile)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;read public key file fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line">	block, _ := pem.Decode(content)</span><br><span class="line">	pubInterface, err := x509.ParsePKIXPublicKey(block.Bytes)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;parse public key fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line">	pubKey := pubInterface.(*rsa.PublicKey)</span><br><span class="line">	cipherTxt, err := rsa.EncryptPKCS1v15(rand.Reader, pubKey, plainText)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;encrypt plain fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> cipherTxt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">privateKeyDecrypt</span><span class="params">(cipherTxt []<span class="keyword">byte</span>, keyFile <span class="keyword">string</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	content, err := ioutil.ReadFile(keyFile)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;read private key file fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line">	block, _ := pem.Decode(content)</span><br><span class="line">	priKey, err := x509.ParsePKCS1PrivateKey(block.Bytes)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;parse private key fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	plainTxt, err := rsa.DecryptPKCS1v15(rand.Reader, priKey, cipherTxt)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;decrypt cipher fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> plainTxt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	txt := <span class="string">&quot;this is testing text&quot;</span></span><br><span class="line">	cipher := publicKeyEncrypt([]<span class="keyword">byte</span>(txt), <span class="string">&quot;public.pem&quot;</span>)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, base64.StdEncoding.EncodeToString(cipher))</span><br><span class="line">	fmt.Printf(<span class="string">&quot;%s\n&quot;</span>, <span class="keyword">string</span>(privateKeyDecrypt(cipher, <span class="string">&quot;private.pem&quot;</span>)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="golang-实现-RSA-数字签名和校验"><a href="#golang-实现-RSA-数字签名和校验" class="headerlink" title="golang 实现 RSA 数字签名和校验"></a><code>golang</code> 实现 <code>RSA</code> 数字签名和校验</h6><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/rsa&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/pem&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">signByRsa</span><span class="params">(priFile <span class="keyword">string</span>, plaintext []<span class="keyword">byte</span>)</span> []<span class="title">byte</span></span> &#123;</span><br><span class="line">	content, err := ioutil.ReadFile(priFile)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;read private key file fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	derTxt, _ := pem.Decode(content)</span><br><span class="line">	priKey, err := x509.ParsePKCS1PrivateKey(derTxt.Bytes)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;parse private key fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	h := sha256.New()</span><br><span class="line">	h.Write(plaintext)</span><br><span class="line"></span><br><span class="line">	hashed, err := rsa.SignPKCS1v15(rand.Reader, priKey, crypto.SHA256, h.Sum(<span class="literal">nil</span>))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;sign plaintext fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> hashed</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">verifyByRsa</span><span class="params">(pubFile <span class="keyword">string</span>, plaintext, sign []<span class="keyword">byte</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	content, err := ioutil.ReadFile(pubFile)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;read public key file fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	derTxt, _ := pem.Decode(content)</span><br><span class="line">	pubInterface, err := x509.ParsePKIXPublicKey(derTxt.Bytes)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;parse public key fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line">	pubKey := pubInterface.(*rsa.PublicKey)</span><br><span class="line"></span><br><span class="line">	h := sha256.New()</span><br><span class="line">	h.Write(plaintext)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := rsa.VerifyPKCS1v15(pubKey, crypto.SHA256, h.Sum(<span class="literal">nil</span>), sign); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	txt := []<span class="keyword">byte</span>(<span class="string">&quot;this is testing text&quot;</span>)</span><br><span class="line">	sign := signByRsa(<span class="string">&quot;private.pem&quot;</span>, txt)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;sign verify result: %v\n&quot;</span>, verifyByRsa(<span class="string">&quot;public.pem&quot;</span>, txt, sign))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 <code>golang</code> 中我没有找到可以使用 <strong>私钥</strong> 加密, <strong>公钥</strong> 解密的接口. 可能需要自己实现</p>
</blockquote>
<h5 id="椭圆曲线非对称加密算法"><a href="#椭圆曲线非对称加密算法" class="headerlink" title="椭圆曲线非对称加密算法"></a>椭圆曲线非对称加密算法</h5><p>椭圆曲线密码学 (<code>Elliptic Curve Cryptography</code>) 简称 <code>ECC</code>, 这是 <code>Golang</code> 实现的另外一种非对称加密算法, 它是一种基于 <strong>椭圆曲线数学</strong> 的公开密钥加密算法. <code>ECC</code> 的主要优势在于, 在某些情况下它比其他算法 (比如 <code>RSA</code>) 使用更小的密钥提供相当的或更高级的安全</p>
<p><code>Golang</code> 标准包里并没有实现 <code>ECC</code> 的加密和解密, 只实现了基于 <code>ECC</code> 的数字签名和校验, 但是 以太坊 <code>go-ethereum</code> 中实现了 <code>ECC</code> 的加密和解密, 有兴趣的话可以参考一下</p>
<h6 id="Golang-实现生成-ECC-密钥对"><a href="#Golang-实现生成-ECC-密钥对" class="headerlink" title="Golang 实现生成 ECC 密钥对"></a><code>Golang</code> 实现生成 <code>ECC</code> 密钥对</h6><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/ecdsa&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/elliptic&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/pem&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;os&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">generatePriAndPubKeys</span><span class="params">(curve elliptic.Curve)</span></span>  &#123;</span><br><span class="line">	priKey, err := ecdsa.GenerateKey(curve, rand.Reader)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;generate private key fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	derTxt, err := x509.MarshalECPrivateKey(priKey)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;marshal private key fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	block := pem.Block&#123;Type: <span class="string">&quot;ECC PRIVATE KEY&quot;</span>, Bytes: derTxt&#125;</span><br><span class="line">	file, err := os.Create(<span class="string">&quot;ecc_private.pem&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;create private key file fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"> 	<span class="keyword">defer</span> file.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := pem.Encode(file, &amp;block); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;write private key fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pubDerTxt, err := x509.MarshalPKIXPublicKey(&amp;priKey.PublicKey)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;marshal public key fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pubBlock := pem.Block&#123;Type: <span class="string">&quot;ECC PRIVATE KEY&quot;</span>, Bytes: pubDerTxt&#125;</span><br><span class="line">	pubFile, err := os.Create(<span class="string">&quot;ecc_public.pem&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;create private key file fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> pubFile.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> err := pem.Encode(pubFile, &amp;pubBlock); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;write private key fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">	generatePriAndPubKeys(elliptic.P256())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="golang-实现-ECC-数字签名和校验"><a href="#golang-实现-ECC-数字签名和校验" class="headerlink" title="golang 实现 ECC 数字签名和校验"></a><code>golang</code> 实现 <code>ECC</code> 数字签名和校验</h6><figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;crypto/ecdsa&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/rand&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/sha256&quot;</span></span><br><span class="line">	<span class="string">&quot;crypto/x509&quot;</span></span><br><span class="line">	<span class="string">&quot;encoding/pem&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;math/big&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">signByEcc</span><span class="params">(priFile <span class="keyword">string</span>, plaintext []<span class="keyword">byte</span>)</span> <span class="params">(rTxt, sTxt []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">	content, err := ioutil.ReadFile(priFile)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;read private key file fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	block, _ := pem.Decode(content)</span><br><span class="line">	priKey, err := x509.ParseECPrivateKey(block.Bytes)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;parse private key fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	h := sha256.New()</span><br><span class="line">	h.Write(plaintext)</span><br><span class="line"></span><br><span class="line">	r, s, err := ecdsa.Sign(rand.Reader, priKey, h.Sum(<span class="literal">nil</span>))</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;sign fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	rTxt, _ = r.MarshalText()</span><br><span class="line">	sTxt, _ = s.MarshalText()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> rTxt, sTxt</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">verifyByEcc</span><span class="params">(pubFile <span class="keyword">string</span>, plaintext, rTxt, sTxt []<span class="keyword">byte</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	content, err := ioutil.ReadFile(pubFile)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;read public key file fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	block, _ := pem.Decode(content)</span><br><span class="line">	pubInterface, err := x509.ParsePKIXPublicKey(block.Bytes)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;parse public key fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line">	pubKey := pubInterface.(*ecdsa.PublicKey)</span><br><span class="line">	r, s := <span class="built_in">new</span>(big.Int), <span class="built_in">new</span>(big.Int)</span><br><span class="line">	<span class="keyword">if</span> err := r.UnmarshalText(rTxt); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;unmarshal r fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> err := s.UnmarshalText(sTxt); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">&quot;unmarshal s fail: %s&quot;</span>, err))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	h := sha256.New()</span><br><span class="line">	h.Write(plaintext)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> ecdsa.Verify(pubKey, h.Sum(<span class="literal">nil</span>), r, s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	txt := []<span class="keyword">byte</span>(<span class="string">&quot;this is testing text&quot;</span>)</span><br><span class="line">	r, s := signByEcc(<span class="string">&quot;ecc_private.pem&quot;</span>, txt)</span><br><span class="line">	fmt.Printf(<span class="string">&quot;sign verify result: %v\n&quot;</span>, verifyByEcc(<span class="string">&quot;ecc_public.pem&quot;</span>, txt, r, s))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="参考和引用"><a href="#参考和引用" class="headerlink" title="参考和引用"></a>参考和引用</h4><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%AD%A6%E6%A0%87%E5%87%86">公钥密码学标准</a></li>
<li><a href="https://zh.wikipedia.org/wiki/X.509">X.509</a></li>
<li><a href="https://zh.wikipedia.org/wiki/ASN.1">ASN.1</a></li>
<li><a href="https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95">RSA加密算法</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%85%AC%E5%BC%80%E5%AF%86%E9%92%A5%E5%8A%A0%E5%AF%86">公开密钥加密</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF%E5%AF%86%E7%A0%81%E5%AD%A6">椭圆曲线密码学</a></li>
</ul>
]]></content>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
  <entry>
    <title>VPS + SSR 实现科学上网</title>
    <url>/posts/vps-and-ssr-over-wall.html</url>
    <content><![CDATA[<p>今天公司的梯子挂掉了我很伤心! 对于我这种不知道是几流的程序员不能 <code>Google</code> 实在是太难受了, 本来自己有一个付费的梯子奈何公司的速度快 (PS:白嫖真的太爽了). 靠人不如靠自己,所以我决定自己搭个梯子自己用,谁都不给! (PS:不能让我对象知道).</p>
<ul>
<li>真诚表态: <strong>梯子只是为了更好的学习, 不做不利于国家的事情</strong></li>
</ul>
<h4 id="选择-VPS"><a href="#选择-VPS" class="headerlink" title="选择 VPS"></a>选择 <code>VPS</code></h4><p><code>VPS</code> (<code>Virtual Private Server</code> 虚拟专用服务器), 说白了要搭梯子得先有个能访问国外资源的服务器不是, <code>VPS</code> 有很多选择: <a href="https://aws.amazon.com/"><code>AWS</code></a>、<a href="https://www.vultr.com/"><code>Vultr</code></a>、<a href="#">搬瓦工</a> 等.我这边直接选的是 <code>Vultr</code>, <code>Vultr</code> 是按小时收费的, 因为现在管控的比较严所以随时都有可能被强掉, 按小时计费的好处就是可以随时销毁随时创建. 当然从价格上来看 <strong>搬瓦工</strong> 是最便宜的, 大家可以根据自己的情况选择 <code>VPS</code>. 在我购买截止为止 <code>Vultr</code> 的服务器最低是 5 刀每个月 (PS: 一年也就三四百块钱, 我个人觉得还可以).</p>
<span id="more"></span>

<h5 id="购买-Vultr-VPS"><a href="#购买-Vultr-VPS" class="headerlink" title="购买 Vultr VPS"></a>购买 <code>Vultr VPS</code></h5><p><img src="/images/science_online_select_server_type.png" alt="image"><br><img src="/images/science_online_select_node.png" alt="image"><br><img src="/images/science_online_select_os.png" alt="image"><br><img src="/images/science_online_select_configuration.png" alt="image"><br><img src="/images/science_online_structure.png" alt="image"></p>
<blockquote>
<p>选服务器系统是最好选 <code>CentOs 6</code> 因为 7 的防火墙会对 <code>SSR</code> 造成一些问题</p>
</blockquote>
<blockquote>
<p>选择好服务器后一定要先 <code>Ping</code> 一下, 如果 <code>ping</code> 不通的话, 先不要销毁服务器. 重新开一台服务器 (这样 IP 是会变的, 如果先销毁了服务器, IP 会回到 IP 池中, 这样下次开出来的服务器 IP一样), 直到 <code>Ping</code> 通为止</p>
</blockquote>
<h4 id="部署-VPS-服务器"><a href="#部署-VPS-服务器" class="headerlink" title="部署 VPS 服务器"></a>部署 <code>VPS</code> 服务器</h4><h5 id="安装-ShadowsocksR-服务器端"><a href="#安装-ShadowsocksR-服务器端" class="headerlink" title="安装 ShadowsocksR 服务器端"></a>安装 <code>ShadowsocksR</code> 服务器端</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://freed.ga/github/shadowsocksR.sh; bash shadowsocksR.sh</span><br></pre></td></tr></table></figure>

<p>如果出现以下图片, 恭喜你安装成功了, <strong>请妥善保存图片内的内容</strong> (PS: 因为我这边安装的过程中没有遇到问题, 所以如果遇到问题的话请自行 Google, 后续如果我遇到问题也会补充)<br><img src="/images/science_online_ssr_success.png" alt="image"></p>
<blockquote>
<p>如果是一个非技术出生的话你可以查一下怎么登陆 <code>VPS</code> 服务器, 我这边就不做详解了</p>
</blockquote>
<h5 id="安装-Google-BBR-进行加速"><a href="#安装-Google-BBR-进行加速" class="headerlink" title="安装 Google BBR 进行加速"></a>安装 <strong><code>Google BBR</code></strong> 进行加速</h5><p>因为 <code>Vultr</code> 的所有机房都位于国外，当晚上上网高峰期来临时，在连接速度上会比较慢，所以我们有必要安装一些程序来加速连接速度。个人认为目前在提速方面比较中意 <code>Google BBR</code>, 但是 <code>Google BBR</code> 相对于 <strong>锐速</strong> 在速度方面还有些不足, 所以我上的是 <strong>魔改版</strong> (PS: 魔改大发好呀). 因为我这边的系统选择的是 <code>CentOS6</code> 所以直接演示 <code>CentOS6</code> 的安装步骤, 如果你是其他系统或其他版本的话, 可以在网上查一下安装方式 (PS: 有很多很多)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/nanqinlang-tcp/tcp_nanqinlang/master/General/CentOS/bash/tcp_nanqinlang-1.3.2.sh &amp;&amp; bash tcp_nanqinlang-1.3.2.sh</span><br></pre></td></tr></table></figure>

<p><img src="/images/science_online_bbr_install.png" alt="image"></p>
<blockquote>
<p>出现图片内容后 <strong>输入数字 1</strong>, 之后的选项直接 <strong>输入 y</strong></p>
</blockquote>
<p>直到安装成功后提示 “请确认此行上面的列表显示的内核版本后，重启以应用新内核”. <strong>注意</strong>: 不要自己重启, 通过 <code>Vultr</code> 后台重启服务器! 不要自己重启, 通过 <code>Vultr</code> 后台重启服务器! 不要自己重启, 通过 <code>Vultr</code> 后台重启服务器! 重要的事情说三遍! </p>
<p>重启服务器后运行 <code>bash tcp_nanqinlang-1.3.2.sh</code> 并 <strong>输入数字 2</strong>, 这样就安装成功啦~~~</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ul>
<li><a href="https://www.baishitou.cn/1524.html">用VPS搭建SSR服务器教程</a></li>
</ul>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
</search>
